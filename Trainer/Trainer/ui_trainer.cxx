// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "ui_trainer.h"
TrainerClass *TrainerClass::uiInstance=0; 

Fl_Menu_Item TrainerClass::menu_ui_ccapiChoice[] = {
 {"2.50", 0,  0, (void*)(25), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2.00", 0,  0, (void*)(20), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* TrainerClass::ui_ccapiVersion25Item = TrainerClass::menu_ui_ccapiChoice + 0;
Fl_Menu_Item* TrainerClass::ui_ccapiVersion20Item = TrainerClass::menu_ui_ccapiChoice + 1;

TrainerClass::TrainerClass() {
  uiInstance = this;
}

Fl_Double_Window* TrainerClass::make_window() {
  { mainWindow = new Fl_Double_Window(728, 728, "Trainer Title");
    mainWindow->user_data((void*)(this));
    { ui_trainerTable = new TrainerTable(5, 245, 685, 400);
      ui_trainerTable->box(FL_THIN_DOWN_FRAME);
      ui_trainerTable->color(FL_BACKGROUND_COLOR);
      ui_trainerTable->selection_color(FL_BACKGROUND_COLOR);
      ui_trainerTable->labeltype(FL_NORMAL_LABEL);
      ui_trainerTable->labelfont(0);
      ui_trainerTable->labelsize(14);
      ui_trainerTable->labelcolor(FL_FOREGROUND_COLOR);
      ui_trainerTable->align(Fl_Align(FL_ALIGN_TOP));
      ui_trainerTable->when(FL_WHEN_RELEASE);
      center(ui_trainerTable);
      ui_trainerTable->end();
    } // TrainerTable* ui_trainerTable
    { ui_ipInput = new IPInput(140, 25, 255, 30);
      ui_ipInput->box(FL_NO_BOX);
      ui_ipInput->color(FL_BACKGROUND_COLOR);
      ui_ipInput->selection_color(FL_BACKGROUND_COLOR);
      ui_ipInput->labeltype(FL_NORMAL_LABEL);
      ui_ipInput->labelfont(0);
      ui_ipInput->labelsize(14);
      ui_ipInput->labelcolor(FL_FOREGROUND_COLOR);
      ui_ipInput->callback((Fl_Callback*)CanConnectCB);
      ui_ipInput->align(Fl_Align(FL_ALIGN_TOP));
      ui_ipInput->when(FL_WHEN_CHANGED);
      readIP();
      ui_ipInput->end();
    } // IPInput* ui_ipInput
    { ui_connectButton = new Fl_Light_Button(30, 25, 100, 30, "Connect");
      ui_connectButton->callback((Fl_Callback*)ConnectButtonCB);
    } // Fl_Light_Button* ui_connectButton
    { ui_ccapiChoice = new Fl_Choice(524, 34, 66, 21, "CCAPI Version:");
      ui_ccapiChoice->down_box(FL_BORDER_BOX);
      ui_ccapiChoice->menu(menu_ui_ccapiChoice);
    } // Fl_Choice* ui_ccapiChoice
    { ui_opStatus = new Fl_Box(5, 655, 135, 16, "Ready");
    } // Fl_Box* ui_opStatus
    { ui_infoBox = new Fl_Text_Display(10, 65, 685, 160);
      ui_infoBox->buffer(&ui_infoBuffer);
      center(ui_infoBox);
    } // Fl_Text_Display* ui_infoBox
    mainWindow->end();
  } // Fl_Double_Window* mainWindow
  return mainWindow;
}

void TrainerClass::CanConnectCB(Fl_Widget *w, void *data) {
  bool valid = data ? true : false;
    if (valid && uiInstance)
  	  uiInstance->ui_connectButton->activate();
    else if (!valid && uiInstance)
  	  uiInstance->ui_connectButton->deactivate();
}

void TrainerClass::ConnectButtonCB(Fl_Widget *w, void *data) {
  if (Interface::instance)
        {
      	  if ( ((Fl_Button*)w)->value() == 0 ) //disconnect
      	  {
        		Interface::instance->disconnect();
        		uiInstance->setConnectStatus(INTERFACE_DISCONNECT);
        	  }
      	  else
    	  {
    		string ip = uiInstance->ui_ipInput->getIP();
    		uiInstance->ui_ipInput->deactivate();
      		Interface::instance->connect(ip);
  			uiInstance->setConnectStatus(INTERFACE_CONNECTING);
    	  }
        }
}

void TrainerClass::readIP() {
  char buf[255];
  	if (GetCurrentDir(buf, 255) != 0) //we can store the IP
  	{
  		string dir = buf;
  		ifstream ipFile;
  		ipFile.open (dir+"/"+"ip.cfg");
  		if (ipFile)
  		{
  			string ip;
  			ipFile >> ip;
  			ui_ipInput->setIP(ip);
  			ipFile.close();
  		}
  	}
}

void TrainerClass::storeIP() {
  char buf[255];
  if (GetCurrentDir(buf, 255) != 0) //we can store the IP
  {
  	string dir = buf;
  	ofstream ipFile;
  	ipFile.open (dir+"/"+"ip.cfg");
  	ipFile << ui_ipInput->getIP();
  	ipFile.close();
  }
}

void TrainerClass::setConnectStatus(char status) {
  static char stat[50];
  if (status == INTERFACE_CONNECT_FAIL)
  {
  sprintf(stat, "Cannot Connect!");
  ui_opStatus->labelcolor(FL_RED);
  ui_opStatus->label(stat);
  ui_connectButton->clear();
  ui_ipInput->activate();
  ui_ccapiChoice->activate();
  }
  else if (status == INTERFACE_CONNECT_SUCCESS)
  {
  sprintf(stat, "Ready");
  ui_opStatus->labelcolor(FL_BLACK);
  ui_opStatus->label(stat);
  ui_ipInput->deactivate();
  ui_ccapiChoice->deactivate();
  ui_connectButton->selection_color(FL_GREEN);
  ui_connectButton->damage(FL_DAMAGE_ALL);
  storeIP();
  }
  else if (status == INTERFACE_DISCONNECT)
  {
  sprintf(stat, "Disconnected");
  ui_opStatus->labelcolor(FL_BLACK);
  ui_opStatus->label(stat);
  ui_connectButton->clear();
  ui_ipInput->activate();
  ui_ccapiChoice->activate();
  ui_ipInput->checkValid();
  }
  else if (status == INTERFACE_CONNECTING)
  {
  sprintf(stat, "Connecting");
  ui_opStatus->labelcolor(FL_BLACK);
  ui_opStatus->label(stat);
  ui_ipInput->deactivate();
  ui_ccapiChoice->deactivate();
  ui_connectButton->selection_color(FL_YELLOW);
  ui_connectButton->damage(FL_DAMAGE_ALL);
  }
}

void TrainerClass::TrainButtonCB(Fl_Widget *w, void *data) {
  rkTrainerCodeObj *item = (rkTrainerCodeObj*)data;
  if (Interface::instance)
        {
  	if ( ((Fl_Button*)w)->value() == 0 ) //off
          {
         		Interface::instance->disable(item);
          }
          else //on
  	{
  		Interface::instance->enable(item);
  	}
  }
}

void TrainerClass::center(Fl_Widget *w) {
  w->position( (mainWindow->w() - w->w())/2, w->y());
}
