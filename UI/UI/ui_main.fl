# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cxx}
decl {\#include <FL/Fl_Native_File_Chooser.H>} {public global
} 

decl {\#include <FL/Fl_Menu_Button.H>} {public global
} 

decl {\#include <FL/fl_ask.H>} {public global
} 

decl {\#include <fstream>} {public global
} 

decl {\#include "InterfaceCCAPI.h"} {public global
} 

decl {\#include "rkWindow.h"} {public global
} 

decl {\#include "RangeTable.h"} {public global
} 

decl {\#include "ResultTable.h"} {public global
} 

decl {\#include "CodeTable.h"} {public global
} 

decl {\#include "ValueInput.h"} {public global
} 

decl {\#include "IPInput.h"} {public global
} 

decl {\#include "SearchOperationChoice.h"} {public global
} 

decl {\#include "ValueTypeChoice.h"} {public global
} 

decl {\#include "Common.h"} {public global
} 

decl {\#include "ValueViewerWindow.h"} {public global
} 

decl {\#include "ValueViewerTable.h"} {public global
} 

decl {\#include "InfoWindow.h"} {public global
} 

decl {\#include "PointerScannerWindow.h"} {public global
} 

decl {\#include "PointerScannerTable.h"} {public global
} 

decl {\#include "AddressOffsetGroup.h"} {public global
} 

decl {\#include "PointerEditorWindow.h"} {public global
} 

decl {\#define RANGE_SAVE 0} {public global
} 

decl {\#define RANGE_LOAD 1} {public global
} 

decl {\#define RANGE_CLEAR 2} {public global
} 

decl {\#define RANGE_FIND 3} {public global
} 

decl {\#define RANGE_CANCEL 4} {public global
} 

decl {\#define RANGE_DELETE 5} {public global
} 

decl {rkCheatUI* uiInstance = 0;} {private global
} 

decl {class InterfaceCCAPI;} {public global
} 

class rkCheatUI {open
} {
  Function {RangeButtonCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {int type = (int)(unsigned long)data;
string fname;
Fl_Native_File_Chooser fnfc;
switch (type)
{
	case RANGE_SAVE:
		fnfc.title("Save Ranges");
		fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
		fnfc.filter("Range Files\\t*.rng");
		fnfc.directory("/var/tmp");
		switch ( fnfc.show() ) {
		  case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
		  case  1: printf("CANCEL\\n");                      break;  // CANCEL
		  default: 
		  	fname = fnfc.filename();
		  	if (fnfc.filter_value() == 0)
		  	{
				if (fname.find(".rng", fname.size()-4) == string::npos)
					fname += ".rng";
			}
		  	printf("PICKED: %s\\n",fname.c_str()); uiInstance->ui_rangeTable->saveData(fname); break;  // FILE CHOSEN
		}
		break;
	case RANGE_LOAD:
		fnfc.title("Load Ranges");
		fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
		fnfc.filter("Range Files\\t*.rng");
		fnfc.directory("/var/tmp");
		switch ( fnfc.show() ) {
		  case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
		  case  1: printf("CANCEL\\n");                      break;  // CANCEL
		  default: 
		  	fname = fnfc.filename();
		  	printf("PICKED: %s\\n",fname.c_str()); uiInstance->ui_rangeTable->loadData(fname); break;  // FILE CHOSEN
		}	
		break;
  	case RANGE_CLEAR:
  		uiInstance->clearRanges(true);
		RangeTableCB(NULL, NULL);
  		break;
   	case RANGE_DELETE:
   		uiInstance->deleteRange();
   		RangeTableCB(NULL, NULL);
   		break;
		RangeTableCB(NULL, NULL);
	case RANGE_FIND:
		InterfaceCCAPI::findAddresses();
		break;
  	case RANGE_CANCEL:
  		InterfaceCCAPI::cancelFindAddresses();
  		break;		
}} {}
  }
  Function {SearchTypeChangeCB(Fl_Widget *w, void *data)} {open return_type {static void}
  } {
    code {if (uiInstance->ui_searchType->isFuzzy())
{
	uiInstance->ui_valueInputGroup->deactivate();
	uiInstance->ui_valueType->activate();
}
else if (uiInstance->ui_searchType->isPointer())
{
	uiInstance->ui_valueInputGroup->activate();
	uiInstance->ui_isHex->value(1);
	uiInstance->ui_valueType->value(uiInstance->getMenuIndex(SEARCH_VALUE_TYPE_4BYTE));
	int value = get_user_data(int, ((Fl_Menu_Button*)w)->mvalue()->user_data());
	uiInstance->ui_valueInput->setValueType(value);
	uiInstance->ui_valueInput->setHex(true);	
	uiInstance->ui_valueType->deactivate();
}
else
{
	uiInstance->ui_valueInputGroup->activate();
	uiInstance->ui_valueType->activate();
}

if (uiInstance->canStartScan()) //I have a value entered or fuzzy
{
	if (uiInstance->m_inProgress)
	{
		uiInstance->ui_buttonNextScan->activate();
		uiInstance->ui_buttonNewScan->activate();
	}
	else
	{
		uiInstance->ui_buttonNewScan->activate();
		uiInstance->ui_buttonNextScan->deactivate();		
	}
}
else //i have no value entered and not fuzzy
{
	if (uiInstance->m_inProgress)
	{
		uiInstance->ui_buttonNextScan->deactivate();
		uiInstance->ui_buttonNewScan->activate();
	}
	else
	{
		uiInstance->ui_buttonNewScan->deactivate();
		uiInstance->ui_buttonNextScan->deactivate();		
	}
}} {}
  }
  Function {SearchValueChangeCB(Fl_Widget *w, void *data)} {open return_type {static void}
  } {
    code {if (uiInstance->canStartScan()) //i have a value
  {
			  if (uiInstance->m_inProgress)
			  {
    			uiInstance->ui_buttonNewScan->activate();
				uiInstance->ui_buttonNextScan->activate();
			  }
			  else
			  {
    			uiInstance->ui_buttonNewScan->activate();
				uiInstance->ui_buttonNextScan->deactivate();
			  }
  }
  else
  {
	  		  if (uiInstance->m_inProgress)
			  {
    			uiInstance->ui_buttonNewScan->activate();
				uiInstance->ui_buttonNextScan->deactivate();
			  }
			  else
			  {
    			uiInstance->ui_buttonNewScan->deactivate();
				uiInstance->ui_buttonNextScan->deactivate();
			  }
  }} {}
  }
  Function {SetHexCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {int value = (int)((Fl_Button*)w)->value();
uiInstance->ui_valueInput->setHex(value == 1);} {}
  }
  Function {SetValueTypeCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {int value = get_user_data(int, ((Fl_Menu_Button*)w)->mvalue()->user_data());
uiInstance->ui_valueInput->setValueType(value);} {}
  }
  Function {StartSearchButtonCB(Fl_Widget *w, void *data)} {open return_type {static void}
  } {
    code {if (uiInstance->ui_searchType->isPointer())
{
	uiInstance->m_pointerScannerWindow->reset();
	uiInstance->m_pointerScannerWindow->show();
}
else
	InterfaceCCAPI::startNewSearch();} {}
  }
  Function {ContinueSearchCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {InterfaceCCAPI::continueSearch();} {}
  }
  Function {RangeInputCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {string v1 = uiInstance->ui_addRangeInput_Start->value();
  	string v2 = uiInstance->ui_addRangeInput_End->value();
	if (w == uiInstance->ui_addRangeButton) //we hit the add range button
	{
  		unsigned int loc1 = stoul(v1, nullptr, 16);
  		unsigned int loc2 = stoul(v2, nullptr, 16);
		uiInstance->ui_rangeTable->addEntry(loc1, loc2);
	}
	else
	{
  		if (v1.empty() || v2.empty())
  		{
  			if (v1.empty())
  			{
	  //			uiInstance->ui_addRangeInput_Start->color(fl_rgb_color(150,150,150));
	  //			uiInstance->ui_addRangeInput_Start->value("00000000");
  			}
  			if (v2.empty())
  			{
	  //			uiInstance->ui_addRangeInput_End->color(fl_rgb_color(150,150,150));
	  //			uiInstance->ui_addRangeInput_End->value("00000000");
  			}
  			uiInstance->ui_addRangeButton->deactivate();
  			return;
  		}
  		unsigned int loc1 = stoul(v1, nullptr, 16);
  		unsigned int loc2 = stoul(v2, nullptr, 16);
  		if (loc2 <= loc1)
  		{
  			uiInstance->ui_addRangeButton->deactivate();
  			return;
  		}
  		uiInstance->ui_addRangeButton->activate();
	}} {}
  }
  Function {RangeTableCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {if (uiInstance->canStartScan())
    		  uiInstance->ui_buttonNewScan->activate();
    	  else
    		  uiInstance->ui_buttonNewScan->deactivate();} {}
  }
  Function {ResultTableButtonCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {int command = (int)(unsigned long)data;
string fname;
Fl_Native_File_Chooser fnfc;
vector<AddressItem> items;
switch (command)
{
case RESULT_TABLE_ADD:
  	items = uiInstance->ui_resultTable->getSelectedResults();
	if (!items.empty())
		uiInstance->ui_codeTable->addResults(items, InterfaceCCAPI::instance->getSearchValueType());
  	break;
case RESULT_TABLE_DELETE:
  	uiInstance->ui_resultTable->deleteResults();
	if (InterfaceCCAPI::instance)
	{
		unsigned long res = InterfaceCCAPI::instance->getNumberOfResults();
		uiInstance->setNumberOfResultsString(to_string(res));
	}
  	break;
    case RESULT_TABLE_REFRESH:
  	uiInstance->ui_resultTable->refreshResults();    
	break;
}
\#if 0
	fnfc.title("Save Code Table");
    	fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
    	fnfc.filter("Code Tables\\t*.ct");
    	fnfc.directory("/var/tmp");
    	switch ( fnfc.show() ) {
    		case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
    		case  1: printf("CANCEL\\n");                      break;  // CANCEL
    		default: 
    		fname = fnfc.filename();
    		if (fnfc.filter_value() == 0)
    		{
    			if (fname.find(".ct", fname.size()-3) == string::npos)
    				fname += ".ct";
    		}
    		printf("PICKED: %s\\n",fname.c_str()); uiInstance->ui_codeTable->saveData(fname); break;  // FILE CHOSEN
    	}
    	break;
    case CODE_TABLE_LOAD:
    	fnfc.title("Load Code Table");
    	fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
    	fnfc.filter("Code Tables\\t*.ct");
    	fnfc.directory("/var/tmp");
    	switch ( fnfc.show() ) {
    		case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
    		case  1: printf("CANCEL\\n");                      break;  // CANCEL
    		default: 
    		fname = fnfc.filename();
    		printf("PICKED: %s\\n",fname.c_str()); uiInstance->ui_codeTable->loadData(fname); break;  // FILE CHOSEN
    	}	
    	break;
\#endif} {}
  }
  Function {CodeTableButtonCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {int command = (int)(unsigned long)data;
  string fname;
  Fl_Native_File_Chooser fnfc;
  switch (command)
  {
	case CODE_TABLE_NEW:
		uiInstance->ui_codeTable->newCode();
		break;
	case CODE_TABLE_DELETE:
		uiInstance->ui_codeTable->deleteCodes();
		break;
  	case CODE_TABLE_SAVE:
  		fnfc.title("Save Code Table");
  		fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
  		fnfc.filter("Code Tables\\t*.ct");
  		fnfc.directory("/var/tmp");
  		switch ( fnfc.show() ) {
  		  case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
  		  case  1: printf("CANCEL\\n");                      break;  // CANCEL
  		  default: 
  		  	fname = fnfc.filename();
  		  	if (fnfc.filter_value() == 0)
  		  	{
  				if (fname.find(".ct", fname.size()-3) == string::npos)
  					fname += ".ct";
  			}
  		  	printf("PICKED: %s\\n",fname.c_str()); uiInstance->ui_codeTable->saveData(fname); break;  // FILE CHOSEN
  		}
  		break;
  	case CODE_TABLE_LOAD:
  		fnfc.title("Load Code Table");
  		fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
  		fnfc.filter("Code Tables\\t*.ct");
  		fnfc.directory("/var/tmp");
  		switch ( fnfc.show() ) {
  		  case -1: printf("ERROR: %s\\n", fnfc.errmsg());    break;  // ERROR
  		  case  1: printf("CANCEL\\n");                      break;  // CANCEL
  		  default: 
  		  	fname = fnfc.filename();
  		  	printf("PICKED: %s\\n",fname.c_str()); uiInstance->ui_codeTable->loadData(fname); break;  // FILE CHOSEN
  		}	
  		break;
  }} {}
  }
  Function {ConnectButtonCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {if (InterfaceCCAPI::instance)
      {
    	  if ( ((Fl_Button*)w)->value() == 0 ) //disconnect
    	  {
      		InterfaceCCAPI::instance->disconnect();
      		uiInstance->setConnectStatus(INTERFACE_DISCONNECT);
      	  }
    	  else
  	  {
  		string ip = uiInstance->ui_ipInput->getIP();
  		uiInstance->ui_ipInput->deactivate();
    		InterfaceCCAPI::instance->connect(ip);
			uiInstance->setConnectStatus(INTERFACE_CONNECTING);
  	  }
      }} {}
  }
  Function {CanConnectCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {bool valid = data;
  if (valid && uiInstance)
	  uiInstance->ui_connectButton->activate();
  else if (!valid && uiInstance)
	  uiInstance->ui_connectButton->deactivate();} {}
  }
  Function {ViewerCB(Fl_Widget *w, void *data)} {return_type {static void}
  } {
    code {uiInstance->m_valueviewer->setCodeData((rkCheat_Code*)data);
uiInstance->m_valueviewer->show();} {}
  }
  Function {rkCheatUI()} {open
  } {
    code {uiInstance = this;
m_interface = 0;
m_inProgress = false;} {}
    Fl_Window mainWindow {
      label CCCheat
      xywh {143 114 1389 843} type Double align 80 hide
      class rkWindow
    } {
      Fl_Group searchGroup {
        label Search open
        xywh {10 70 380 274} box BORDER_BOX color 47
      } {
        Fl_Choice ui_searchType {
          label {Search Type:}
          callback SearchTypeChangeCB
          xywh {104 96 281 23} down_box BORDER_BOX when 1 textsize 12
          class SearchOperationChoice
        } {}
        Fl_Choice ui_valueType {
          label {Value Type:}
          callback SetValueTypeCB
          xywh {95 166 113 23} down_box BORDER_BOX
        } {
          MenuItem {} {
            label {1 Byte}
            user_data SEARCH_VALUE_TYPE_1BYTE
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label {2 Bytes}
            user_data SEARCH_VALUE_TYPE_2BYTE
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label {4 Bytes}
            user_data SEARCH_VALUE_TYPE_4BYTE
            xywh {0 0 30 20}
          }
          MenuItem {} {
            label Float
            user_data SEARCH_VALUE_TYPE_FLOAT
            xywh {0 0 30 20}
          }
        }
        Fl_Button ui_buttonNewScan {
          label {New Scan}
          callback StartSearchButtonCB
          xywh {40 231 80 24} deactivate
        }
        Fl_Button ui_buttonNextScan {
          label {Next Scan}
          callback ContinueSearchCB
          xywh {170 230 80 24} deactivate
        }
        Fl_Group ui_valueInputGroup {
          xywh {15 119 259 41} align 4
        } {
          Fl_Input ui_valueInput {
            label {Value:}
            callback SearchValueChangeCB
            xywh {60 131 135 24} when 1
            class ValueInput
          }
          Fl_Check_Button ui_isHex {
            label Hex
            callback SetHexCB
            xywh {210 140 64 15} down_box DOWN_BOX
          }
        }
      }
      Fl_Group ui_resultGroup {
        label Results open
        xywh {805 70 560 274} box BORDER_BOX color 47
      } {
        Fl_Table ui_resultTable {open
          xywh {810 99 423 240} selection_color 6
          class ResultTable
        } {}
        Fl_Box ui_numOfResults {
          xywh {940 77 140 16}
        }
        Fl_Box {} {
          label {Number of Results:}
          xywh {810 77 130 16}
        }
        Fl_Group ui_resultBtnGroup {open
          xywh {1245 100 115 165}
        } {
          Fl_Button ui_ButtonAddResult {
            label {Add Result}
            user_data RESULT_TABLE_ADD
            callback ResultTableButtonCB
            xywh {1250 100 100 30}
          }
          Fl_Button ui_ButtonDeleteResult {
            label {Delete Result}
            user_data RESULT_TABLE_DELETE
            callback ResultTableButtonCB
            xywh {1250 140 100 30}
          }
          Fl_Button ui_ButtonRefreshResult {
            label Refresh
            user_data RESULT_TABLE_REFRESH
            callback ResultTableButtonCB
            xywh {1250 180 100 30}
          }
        }
      }
      Fl_Group ui_rangeGroup {
        label Range open
        xywh {410 70 375 275} box BORDER_BOX color 47
      } {
        Fl_Table ui_rangeTable {
          callback RangeTableCB open
          xywh {418 75 242 215} box THIN_UP_FRAME selection_color 6
          class RangeTable
        } {}
        Fl_Button ui_buttonFindRanges {
          label {Find Ranges}
          user_data RANGE_FIND
          callback RangeButtonCB
          xywh {672 96 100 30}
        }
        Fl_Button ui_buttonSaveRanges {
          label {Save Ranges}
          user_data RANGE_SAVE
          callback RangeButtonCB
          xywh {672 136 100 30}
        }
        Fl_Button ui_buttonLoadRanges {
          label {Load Ranges}
          user_data RANGE_LOAD
          callback RangeButtonCB
          xywh {672 176 100 30}
        }
        Fl_Button ui_buttonClearRanges {
          label {Clear Ranges}
          user_data RANGE_CLEAR
          callback RangeButtonCB
          xywh {672 216 100 30}
        }
        Fl_Group ui_addRangeGrp {open
          xywh {410 295 367 50} color 47
        } {
          Fl_Input ui_addRangeInput_Start {
            callback RangeInputCB
            xywh {420 308 100 24} when 1
            code0 {ui_addRangeInput_Start->setHex(true);}
            code1 {ui_addRangeInput_Start->maximum_size(8);}
            class ValueInput
          }
          Fl_Input ui_addRangeInput_End {
            callback RangeInputCB
            xywh {540 308 100 24} when 1
            code0 {ui_addRangeInput_End->setHex(true);}
            code1 {ui_addRangeInput_End->maximum_size(8);}
            class ValueInput
          }
          Fl_Button ui_addRangeButton {
            label {Add Range}
            callback RangeInputCB
            xywh {672 305 100 30}
            code0 {ui_addRangeButton->deactivate();}
          }
        }
        Fl_Button ui_buttonDeleteRange {
          label {Delete Range}
          user_data RANGE_DELETE
          callback RangeButtonCB
          xywh {672 255 100 30}
        }
      }
      Fl_Group ui_statusbar {open
        xywh {1 775 1364 35} box BORDER_BOX
        code0 {ui_statusbar->size(mainWindow->w()-12, 35);}
        code1 {ui_statusbar->position(0, mainWindow->h() - ui_statusbar->h() - 12);}
      } {
        Fl_Progress ui_opProgress {
          xywh {10 782 1220 20}
          code0 {ui_opProgress->minimum(0.0f);}
          code1 {ui_opProgress->maximum(1.0f);}
        }
        Fl_Box ui_opStatus {
          label Ready
          xywh {1225 784 135 16}
        }
      }
      Fl_Group ui_codeGroup {
        label Codes open
        xywh {114 395 1120 360} box BORDER_BOX color 47
      } {
        Fl_Table ui_codeTable {open
          xywh {119 425 985 325} color 47 selection_color 6 labeltype NO_LABEL
          code0 {ui_codeTable->setViewer(ViewerCB);}
          class CodeTable
        } {}
        Fl_Button ui_ButtonNewCode {
          label {New Code}
          user_data CODE_TABLE_NEW
          callback CodeTableButtonCB
          xywh {1124 465 100 30}
        }
        Fl_Button ui_ButtonDeleteCode {
          label {Delete Code}
          user_data CODE_TABLE_DELETE
          callback CodeTableButtonCB
          xywh {1124 511 100 30}
        }
        Fl_Button ui_ButtonSaveCodes {
          label {Save Codes}
          user_data CODE_TABLE_SAVE
          callback CodeTableButtonCB
          xywh {1124 558 100 30}
        }
        Fl_Button ui_ButtonLoadCodes {
          label {Load Codes}
          user_data CODE_TABLE_LOAD
          callback CodeTableButtonCB
          xywh {1124 605 100 30}
        }
      }
      Fl_Light_Button ui_connectButton {
        label Connect
        callback ConnectButtonCB
        xywh {20 20 100 30} type Toggle selection_color 95 align 20 deactivate
      }
      Fl_Group ui_ipInput {
        callback CanConnectCB open
        xywh {135 20 255 30} when 1
        code0 {readIP();}
        class IPInput
      } {}
      Fl_Box ui_versionText {
        label Version
        xywh {1239 25 106 16} align 20
      }
      Fl_Button ui_infoButton {
        callback {uiInstance->m_infoWindow->show();}
        image {../../../../../../Downloads/imeem.png} xywh {1204 18 32 32} align 512
      }
      Fl_Choice ui_ccapiChoice {
        label {CCAPI Version:} open
        xywh {504 24 66 21} down_box BORDER_BOX
      } {
        MenuItem ui_ccapiVersion25Item {
          label {2.50}
          user_data 25
          xywh {0 0 30 20}
        }
        MenuItem ui_ccapiVersion20Item {
          label {2.00}
          user_data 20
          xywh {0 0 30 20}
        }
      }
    }
    Fl_Window m_valueviewer {
      label {Value Viewer}
      xywh {-32000 -32000 526 695} type Double hide
      class ValueViewerWindow
    } {
      Fl_Table m_valueTable {
        xywh {0 60 495 625} selection_color 6
        class ValueViewerTable
      } {}
      Fl_Choice m_viewerTypeChoice {
        label Type
        callback {((ValueViewerWindow*)v)->TypeChangedCB(o)}
        xywh {45 15 110 25} down_box BORDER_BOX when 1
        code0 {m_viewerTypeChoice->menu(menu_ui_valueType);}
      } {}
      Fl_Check_Button m_viewerSignedButton {
        label Signed
        callback {((ValueViewerWindow*)v)->SignedChangedCB(o)}
        xywh {175 15 64 20} down_box DOWN_BOX
      }
      Fl_Button m_valueAddCodeButton {
        label {Add Code}
        callback {((ValueViewerWindow*)v)->AddCodeCB(o)}
        xywh {395 15 100 30}
      }
    }
    Fl_Window m_infoWindow {
      label {CCCheat Information}
      xywh {39 66 476 336} type Double hide
      class InfoWindow
    } {}
    Fl_Window m_pointerScannerWindow {
      label {Pointer Scanner}
      xywh {301 233 557 534} type Double
      class PointerScannerWindow modal visible
    } {
      Fl_Group m_psLoadNewGroup {open
        xywh {23 60 520 365} hide
      } {
        Fl_Button m_psNewScanButton {
          label {New Scan}
          callback {((PointerScannerWindow*)o->parent()->parent())->NewScanCB(o)}
          xywh {238 215 90 30}
        }
        Fl_Button m_psLoadScan {
          label {Load Scan}
          callback {((PointerScannerWindow*)o->parent()->parent())->LoadScanCB(o)}
          xywh {238 270 90 30}
        }
        Fl_Button m_psCancelScan {
          label Exit
          callback {((PointerScannerWindow*)o->parent()->parent())->hide()}
          xywh {238 325 90 30}
        }
        Fl_Box {} {
          label {Would you like to start a new scan or load a previous pointer scan?}
          xywh {70 157 425 38}
        }
      }
      Fl_Group m_psNewGroup {open
        xywh {10 10 550 515}
      } {
        Fl_Input m_psNewAddress {
          label {Address To Scan:}
          callback {((PointerScannerWindow*)o->parent()->parent())->AddressChangeCB(o);}
          xywh {175 26 160 24} when 1
          class ValueInput
        }
        Fl_Input m_psOffset {
          label {Offset From Address:}
          xywh {175 63 110 24}
          class ValueInput
        }
        Fl_Spinner m_psNewDepthSpinner {
          label {Max Scan Depth:}
          xywh {175 101 50 24}
        }
        Fl_Button m_psNewStartButton {
          label Start
          callback {((PointerScannerWindow*)o->parent()->parent())->StartNewScanCB(o);}
          xywh {395 25 85 25}
        }
        Fl_Table m_psNewScanTable {open
          xywh {32 130 373 385}
          class PointerScannerTable
        } {}
        Fl_Progress m_psNewDumpProgress {
          label {Dumping Memory...}
          xywh {255 100 275 20} hide
        }
        Fl_Group m_psScanStateLabelGroup {open
          xywh {275 100 285 28}
        } {
          Fl_Box m_psScanningLabel {
            label {Scanning...}
            xywh {282 102 93 21} align 20
          }
          Fl_Box m_psScanningNumberLabel {
            label number
            xywh {457 102 73 21} align 20
          }
          Fl_Box m_psScanningResultsLabel {
            label {Results:}
            xywh {402 102 58 21} align 20
          }
        }
        Fl_Button m_psNewCancelButton {
          label Exit
          callback {((PointerScannerWindow*)o->parent()->parent())->hide();}
          xywh {395 60 85 25}
        }
        Fl_Button m_psAddPointerButton {
          label {Add Pointer}
          callback {((PointerScannerWindow*)o->parent()->parent())->AddPointerToListCB(o);}
          xywh {455 130 85 25}
        }
      }
    }
    Fl_Window m_peWindow {
      label {Pointer Editor} open
      xywh {330 277 426 476} type Double
      code0 {m_peWindow->reset();}
      class PointerEditorWindow modal visible
    } {
      Fl_Group m_peAddressSet0 {
        xywh {15 14 395 37} box BORDER_BOX
        class AddressOffsetGroup
      } {}
      Fl_Group m_peAddressSet1 {
        xywh {15 62 395 37} box BORDER_BOX
        class AddressOffsetGroup
      } {}
      Fl_Group m_peAddressSet2 {
        xywh {15 111 395 37} box BORDER_BOX
        class AddressOffsetGroup
      } {}
      Fl_Group m_peAddressSet3 {
        xywh {15 159 395 37} box BORDER_BOX
        class AddressOffsetGroup
      } {}
      Fl_Group m_peAddressSet4 {
        xywh {15 208 395 37} box BORDER_BOX
        class AddressOffsetGroup
      } {}
      Fl_Input m_peResolvedAddress {
        xywh {140 306 130 24} deactivate
        class ValueInput
      }
      Fl_Box {} {
        label {Resolved Address:}
        xywh {15 311 130 16} align 20
      }
      Fl_Choice m_peValueType {
        label {Type:}
        callback {((PointerEditorWindow*)o->parent())->OnTypeChangedCB(o);} open selected
        xywh {315 340 95 20} down_box BORDER_BOX when 1
        class ValueTypeChoice
      } {}
      Fl_Button m_peRefreshButton {
        label Refresh
        callback {((PointerEditorWindow*)o->parent())->OnRefreshCB(o);}
        xywh {173 390 80 25}
      }
      Fl_Button m_peOKButton {
        label OK
        callback {((PointerEditorWindow*)o->parent())->OnOKCB(o);}
        xywh {113 425 80 25}
      }
      Fl_Button m_peCancelButton {
        label Cancel
        callback {((PointerEditorWindow*)o->parent())->OnCancelCB(o);}
        xywh {233 425 80 25}
      }
      Fl_Button m_peAddPointerButton {
        label Add
        callback {((PointerEditorWindow*)o->parent())->OnAddCB(o);}
        xywh {113 260 80 25}
      }
      Fl_Button m_peDeletePointerButton {
        label Delete
        callback {((PointerEditorWindow*)o->parent())->OnDeleteCB(o);}
        xywh {233 260 80 25}
      }
      Fl_Input m_peResolvedValue {
        xywh {140 336 130 24} deactivate
        class ValueInput
      }
      Fl_Box {} {
        label {Resolved Value:}
        xywh {15 341 125 16} align 20
      }
    }
  }
  Function {setInterface(InterfaceCCAPI *iface)} {} {
    code {m_interface = iface;} {}
  }
  decl {InterfaceCCAPI *m_interface;} {private local
  }
  Function {clearRanges(bool reInit=false)} {} {
    code {ui_rangeTable->clear();
if (reInit)
	ui_rangeTable->addEntry(0, 0xFFFFFFFF);
	ui_rangeTable->clearSelection();} {}
  }
  Function {deleteRange()} {} {
    code {for (int i=ui_rangeTable->rows()-1; i>=0; i--)
	{
		if (ui_rangeTable->row_selected(i))
		{
			ui_rangeTable->deleteEntry(i);
		}
	}
	ui_rangeTable->clearSelection();} {}
  }
  Function {addRange(unsigned long begin, unsigned long end)} {} {
    code {ui_rangeTable->addEntry(begin, end);} {}
  }
  Function {setRangeProgress(float percent, string status, bool done)} {return_type void
  } {
    code {static char stat[50];
static char pc[20];
ui_opProgress->value(percent);
sprintf(pc, "%.1f%%", percent*100);
ui_opProgress->label(pc);
strncpy(stat, status.c_str(), 50);
ui_opStatus->label(stat);} {}
  }
  Function {findRangeStarted()} {return_type void
  } {
    code {searchGroup->deactivate();
ui_buttonSaveRanges->deactivate();
ui_buttonLoadRanges->deactivate();
ui_buttonClearRanges->deactivate();
ui_buttonDeleteRange->deactivate();
ui_addRangeGrp->deactivate();
ui_buttonFindRanges->label("Cancel");
ui_buttonFindRanges->user_data((void*)(RANGE_CANCEL));} {}
  }
  Function {findRangeStopped()} {return_type void
  } {
    code {searchGroup->activate();
ui_buttonSaveRanges->activate();
ui_buttonLoadRanges->activate();
ui_buttonClearRanges->activate();
ui_buttonDeleteRange->activate();
ui_addRangeGrp->activate();
ui_buttonFindRanges->label("Find Ranges");
ui_buttonFindRanges->user_data((void*)(RANGE_FIND));} {}
  }
  Function {canStartScan()} {return_type bool
  } {
    code {if (ui_rangeTable->hasSelection())
	{
		if (ui_searchType->isFuzzy())//I don't care about the value
			return true;
		if (!string(ui_valueInput->value()).empty())
			return true;
	}
	return false;} {}
  }
  Function {searchStarted()} {return_type void
  } {
    code {ui_rangeGroup->deactivate();
ui_searchType->deactivate();
ui_valueInputGroup->deactivate();
ui_valueType->deactivate();
ui_buttonNextScan->deactivate();
ui_buttonNewScan->label("Cancel");
ui_buttonNewScan->activate();
ui_resultTable->setResultType(get_user_data(char, ui_valueType->mvalue()->user_data()));} {}
  }
  Function {searchStopped(char how)} {return_type void
  } {
    code {if (how == SEARCH_STOPPED_PROPER)
{
	ui_rangeGroup->deactivate();
	ui_valueType->deactivate();
	ui_buttonNextScan->activate();
	ui_buttonNewScan->label("Reset Scan");
	m_inProgress = true;
}
else
{
	ui_numOfResults->label("");
	ui_rangeGroup->activate();
	ui_valueType->activate();
	ui_buttonNextScan->deactivate();
	if (how == SEARCH_STOPPED_NO_RESULTS)
		ui_buttonNewScan->label("Reset Scan");
	else
		ui_buttonNewScan->label("New Scan");
	m_inProgress = false;		
}
ui_searchType->activate();
ui_valueInputGroup->activate();
ui_buttonNewScan->activate();
SearchTypeChangeCB(0,0);} {}
  }
  Function {getMenuIndex(char val)} {return_type int
  } {
    code {for (int i=0; menu_ui_valueType[i].text != 0; ++i)
{
	if (get_user_data(int, menu_ui_valueType[i].user_data_) == val)
		return i;
}
return -1;} {}
  }
  Function {setSearchProgress(float percent, string status, bool done)} {return_type void
  } {
    code {static char stat[50];
static char pc[20];
ui_opProgress->value(percent);
sprintf(pc, "%.1f%%", percent*100);
ui_opProgress->label(pc);
strncpy(stat, status.c_str(), 50);
ui_opStatus->label(stat);} {}
  }
  Function {setNumberOfResultsString(string res)} {return_type void
  } {
    code {static char stat[50];
strncpy(stat, res.c_str(), 50);
ui_numOfResults->label(stat);} {}
  }
  decl {bool m_inProgress;} {public local
  }
  Function {setConnectStatus(char status)} {return_type void
  } {
    code {static char stat[50];
if (status == INTERFACE_CONNECT_FAIL)
{
sprintf(stat, "Cannot Connect!");
ui_opStatus->labelcolor(FL_RED);
ui_opStatus->label(stat);
searchGroup->deactivate();
ui_rangeGroup->deactivate();
ui_resultGroup->deactivate();
ui_codeGroup->deactivate();
ui_connectButton->clear();
ui_ipInput->activate();
ui_ccapiChoice->activate();
}
else if (status == INTERFACE_CONNECT_SUCCESS)
{
sprintf(stat, "Ready");
ui_opStatus->labelcolor(FL_BLACK);
ui_opStatus->label(stat);
searchGroup->activate();
ui_rangeGroup->activate();
ui_resultGroup->activate();
ui_codeGroup->activate();
ui_ipInput->deactivate();
ui_ccapiChoice->deactivate();
ui_connectButton->selection_color(FL_GREEN);
ui_connectButton->damage(FL_DAMAGE_ALL);
storeIP();
}
else if (status == INTERFACE_DISCONNECT)
{
sprintf(stat, "Disconnected");
ui_opStatus->labelcolor(FL_BLACK);
ui_opStatus->label(stat);
searchGroup->deactivate();
ui_rangeGroup->deactivate();
ui_resultGroup->deactivate();
ui_codeGroup->deactivate();
ui_connectButton->clear();
ui_ipInput->activate();
ui_ccapiChoice->activate();
ui_ipInput->checkValid();
if (m_valueviewer->visible())
	m_valueviewer->hide();

}
else if (status == INTERFACE_CONNECTING)
{
sprintf(stat, "Connecting");
ui_opStatus->labelcolor(FL_BLACK);
ui_opStatus->label(stat);
searchGroup->deactivate();
ui_rangeGroup->deactivate();
ui_resultGroup->deactivate();
ui_codeGroup->deactivate();
ui_ipInput->deactivate();
ui_ccapiChoice->deactivate();
ui_connectButton->selection_color(FL_YELLOW);
ui_connectButton->damage(FL_DAMAGE_ALL);
}} {}
  }
  Function {storeIP()} {return_type void
  } {
    code {char buf[255];
if (GetCurrentDir(buf, 255) != 0) //we can store the IP
{
	string dir = buf;
	ofstream ipFile;
	ipFile.open (dir+"/"+"ip.cfg");
	ipFile << ui_ipInput->getIP();
	ipFile.close();
}} {}
  }
  Function {readIP()} {return_type void
  } {
    code {char buf[255];
	if (GetCurrentDir(buf, 255) != 0) //we can store the IP
	{
		string dir = buf;
		ifstream ipFile;
		ipFile.open (dir+"/"+"ip.cfg");
		if (ipFile)
		{
			string ip;
			ipFile >> ip;
			ui_ipInput->setIP(ip);
			ipFile.close();
		}
	}} {}
  }
  Function {setVersion(string ver)} {return_type void
  } {
    code {static char ui_version[70];
sprintf(ui_version, "Version: %s", ver.c_str());
ui_versionText->label(ui_version);} {}
  }
  decl {\#include "PointerScannerTable.h"} {public global
  }
} 
