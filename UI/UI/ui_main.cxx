// generated by Fast Light User Interface Designer (fluid) version 1.0302

#include "ui_main.h"
rkCheatUI* uiInstance = 0; 

Fl_Menu_Item rkCheatUI::menu_ui_valueType[] = {
 {"1 Byte", 0,  0, (void*)(SEARCH_VALUE_TYPE_1BYTE), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2 Bytes", 0,  0, (void*)(SEARCH_VALUE_TYPE_2BYTE), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"4 Bytes", 0,  0, (void*)(SEARCH_VALUE_TYPE_4BYTE), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Float", 0,  0, (void*)(SEARCH_VALUE_TYPE_FLOAT), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void rkCheatUI::cb_ui_infoButton_i(Fl_Button*, void*) {
  uiInstance->m_infoWindow->show();
}
void rkCheatUI::cb_ui_infoButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_ui_infoButton_i(o,v);
}

#include <FL/Fl_Image.H>
static unsigned char idata_imeem[] =
{3,3,3,18,18,18,34,34,34,38,38,38,39,39,39,38,38,38,39,39,39,39,39,39,38,38,
38,39,39,39,39,39,39,38,38,38,39,39,39,38,38,38,38,38,38,39,39,39,39,39,39,39,
39,39,38,38,38,39,39,39,38,38,38,38,38,38,38,38,38,39,39,39,38,38,38,38,38,38,
38,38,38,38,38,38,38,38,38,33,33,33,19,19,19,3,3,3,18,18,18,43,43,43,69,69,69,
71,71,71,71,71,71,71,71,71,72,72,72,72,72,72,71,71,71,73,73,73,72,72,72,71,71,
71,72,72,72,72,72,72,71,71,71,71,71,71,72,72,72,72,72,72,70,70,70,72,72,72,72,
72,72,72,72,72,71,71,71,72,72,72,72,72,72,71,71,71,70,70,70,72,72,72,73,73,73,
69,69,69,42,42,42,17,17,17,34,34,34,67,67,67,63,63,63,63,63,63,62,62,62,61,61,
61,64,64,64,62,62,62,62,62,62,63,63,63,62,62,62,63,63,63,62,62,62,62,62,62,63,
63,63,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,62,62,62,63,63,63,
61,61,61,64,64,64,64,64,64,62,62,62,61,61,61,62,62,62,62,62,62,68,68,68,32,32,
32,37,37,37,66,66,66,61,61,61,61,61,61,60,60,60,61,61,61,62,62,62,60,60,60,60,
60,60,61,61,61,59,59,59,61,61,61,60,60,60,59,59,59,62,62,62,60,60,60,62,62,62,
61,61,61,61,61,61,60,60,60,60,60,60,59,59,59,60,60,60,59,59,59,61,61,61,61,61,
61,61,61,61,60,60,60,61,61,61,60,60,60,67,67,67,36,36,36,35,35,35,61,61,61,59,
59,59,58,58,58,57,57,57,58,58,58,56,56,56,58,58,58,57,57,57,58,58,58,58,58,58,
57,57,57,55,55,55,47,47,47,41,41,41,39,39,39,39,39,39,41,41,41,49,49,49,56,56,
56,59,59,59,59,59,59,58,58,58,58,58,58,58,58,58,58,58,58,56,56,56,56,56,56,58,
58,58,58,58,58,61,61,61,34,34,34,35,35,35,61,61,61,55,55,55,56,56,56,54,54,54,
54,54,54,56,56,56,57,57,57,55,55,55,55,55,55,53,53,53,36,36,36,44,44,44,101,
101,101,144,144,144,168,168,168,168,168,168,144,144,144,100,100,100,44,44,44,35,
35,35,52,52,52,56,56,56,56,56,56,56,56,56,54,54,54,55,55,55,54,54,54,54,54,54,
54,54,54,59,59,59,34,34,34,34,34,34,59,59,59,52,52,52,53,53,52,54,54,54,53,53,
53,54,54,54,54,54,54,50,50,50,42,42,42,88,88,88,176,176,176,253,253,253,254,
254,254,255,255,255,255,255,255,255,255,255,255,255,255,254,254,254,253,253,253,
176,176,176,88,88,88,42,42,42,50,50,50,53,53,53,53,53,53,53,53,53,53,53,53,54,
54,54,54,54,54,56,56,56,33,33,33,33,33,33,56,56,56,50,50,50,52,52,52,52,52,52,
50,50,50,51,51,51,51,51,51,47,47,47,131,131,131,237,237,237,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,237,237,237,130,130,130,48,48,48,50,50,50,51,51,51,52,
52,52,51,51,51,52,52,52,50,50,50,54,54,54,31,31,31,31,31,31,53,53,53,48,48,48,
48,48,48,47,47,47,47,47,47,48,48,48,51,51,51,184,184,184,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,182,182,182,
50,50,50,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,51,51,51,31,31,31,30,30,
30,48,48,48,46,46,46,46,46,46,45,45,45,45,45,45,47,47,47,144,144,144,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,237,237,237,151,
151,151,152,152,152,238,238,238,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,143,143,143,46,46,46,45,45,45,45,45,45,46,46,46,44,44,
44,50,50,50,30,30,30,29,29,29,47,47,47,43,43,43,44,44,44,43,43,43,44,44,44,108,
108,108,244,244,244,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,185,185,185,45,45,45,44,44,44,187,187,187,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,244,244,244,106,106,106,44,44,
44,43,43,43,43,43,43,43,43,42,47,47,47,29,29,29,29,29,29,44,44,44,42,42,42,42,
42,42,43,43,43,38,38,38,206,206,206,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,208,208,208,54,54,54,55,55,55,210,
210,210,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,204,204,204,37,37,37,43,43,43,42,42,42,41,41,41,44,44,44,28,28,28,
27,27,27,41,41,41,37,37,37,38,38,38,39,39,39,73,73,73,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,249,249,
249,206,206,206,206,206,206,249,249,249,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,254,254,254,72,72,72,39,39,39,40,40,
40,38,38,38,43,43,42,28,28,27,26,26,26,39,39,39,36,36,36,36,36,36,36,36,36,130,
130,130,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,203,203,203,63,63,63,63,63,63,204,204,204,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,
254,128,128,128,35,35,35,36,36,36,37,37,37,39,39,39,26,26,26,26,26,26,36,36,36,
33,33,33,35,35,35,34,34,34,174,174,174,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,180,180,180,32,32,32,34,
34,34,182,182,182,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,172,172,172,32,32,32,34,34,34,34,34,34,36,
36,36,24,24,24,24,24,24,33,33,33,32,32,32,31,31,31,32,32,32,181,181,181,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,180,180,180,32,32,32,32,32,32,182,182,182,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,179,179,
179,32,32,32,33,33,33,32,32,32,34,34,34,24,24,24,24,24,24,33,33,33,29,29,29,29,
29,29,30,30,30,167,167,167,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,179,179,179,29,29,29,29,29,29,180,
180,180,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,168,168,168,28,28,28,29,29,29,27,27,27,31,31,31,23,23,
23,23,23,23,30,30,30,28,28,28,27,27,27,26,26,26,119,119,119,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,
178,178,178,26,26,26,26,26,26,179,179,179,254,254,254,254,254,254,254,254,254,
254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,133,133,133,27,27,
27,28,28,28,26,26,26,27,27,27,22,22,22,22,22,22,27,27,27,24,24,24,23,23,23,24,
24,24,56,56,56,247,247,247,250,250,250,250,250,250,250,250,250,250,250,250,250,
250,250,250,250,250,250,250,250,173,173,173,24,24,24,22,22,22,175,175,175,250,
250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,
249,249,249,76,76,76,24,24,24,23,23,23,24,24,24,26,26,26,22,22,22,20,20,20,23,
23,23,22,22,22,21,21,21,23,23,23,21,21,21,194,194,194,248,248,248,248,248,248,
248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,171,171,171,22,22,
22,21,21,21,173,173,173,248,248,248,248,248,248,248,248,248,248,248,248,248,
248,248,248,248,248,248,248,248,227,227,227,30,30,30,21,21,21,22,22,22,20,20,20,
23,23,23,20,20,20,20,20,20,22,22,22,19,19,19,19,19,19,20,20,20,18,18,18,77,77,
77,220,220,220,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,
244,244,168,168,168,19,19,19,19,19,19,170,170,170,244,244,244,244,244,244,244,
244,244,244,244,244,244,244,244,244,244,244,239,239,239,126,126,126,19,19,19,19,
19,19,19,19,19,19,19,19,21,21,21,19,19,19,19,19,19,19,19,19,17,17,17,19,19,19,
18,18,18,19,19,19,26,26,26,126,126,126,242,242,242,242,242,242,242,242,242,242,
242,242,242,242,242,242,242,242,203,203,203,59,59,59,59,59,59,204,204,204,242,
242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,196,196,196,
46,46,46,18,18,18,19,19,19,19,19,19,18,18,18,20,20,20,18,18,18,20,20,20,22,22,
22,18,18,18,19,19,19,19,19,19,17,17,17,19,19,19,19,19,19,132,132,132,220,220,
220,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,
219,219,219,55,55,55,20,20,20,19,19,19,18,18,18,20,20,20,18,18,18,18,18,18,18,
18,18,20,20,20,20,20,20,18,18,18,18,18,18,20,20,20,19,19,19,20,20,20,18,18,18,
27,27,27,84,84,84,212,212,212,236,236,236,236,236,236,236,236,236,236,236,236,
236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,
236,211,211,211,97,97,97,19,19,19,20,20,20,19,19,19,19,19,19,19,19,19,18,18,18,
18,18,18,18,18,18,19,19,19,21,21,21,19,19,19,18,18,18,17,17,17,18,18,18,19,19,
19,19,19,19,19,19,19,19,19,19,30,30,30,89,89,89,170,170,170,191,191,191,211,
211,211,217,217,217,232,232,232,232,232,232,232,232,232,232,232,232,226,226,226,
178,178,178,48,48,48,19,19,19,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,17,
17,17,20,20,20,18,18,18,19,19,19,21,21,21,17,17,17,18,18,18,18,18,18,19,19,19,
20,20,20,19,19,19,19,19,19,18,18,18,20,20,20,18,18,18,28,28,28,47,47,47,70,70,
70,124,124,124,230,230,230,230,230,230,230,230,230,218,218,218,113,113,113,41,
41,41,18,18,18,17,17,17,19,19,19,19,19,19,18,18,18,17,17,17,19,19,19,18,18,18,
19,19,19,18,18,18,20,20,20,22,22,22,18,18,18,19,19,19,18,18,18,18,18,18,19,19,
19,20,20,20,18,18,18,20,20,20,19,19,19,20,20,20,18,18,18,17,17,17,27,27,27,160,
160,160,219,219,219,190,190,190,116,116,116,34,34,34,18,18,18,20,20,20,18,18,18,
19,19,19,18,18,18,17,17,17,20,20,20,19,19,19,20,20,20,19,19,19,18,18,18,18,18,
18,20,20,20,20,20,20,20,20,20,19,19,19,19,19,19,18,18,18,18,18,18,20,20,20,19,
19,19,19,19,19,18,18,18,20,20,20,18,18,18,19,19,19,59,59,59,143,143,143,90,90,
90,50,50,50,18,18,18,18,18,18,18,18,18,19,19,19,20,20,20,18,18,18,18,18,18,19,
19,19,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,18,18,18,19,19,19,21,21,21,
18,18,18,17,17,17,19,19,19,18,18,18,20,20,20,20,20,20,17,17,17,17,17,17,19,19,
19,20,20,20,20,20,20,20,20,20,19,19,19,18,18,18,18,18,18,17,17,17,19,19,19,19,
19,19,18,18,18,19,19,19,18,18,18,19,19,19,18,18,18,19,19,19,19,19,19,18,18,18,
19,19,19,20,20,20,19,19,19,19,19,19,17,17,17,20,20,20,19,19,19,19,18,18,18,18,
18,19,19,19,18,18,18,18,18,18,19,19,19,19,19,19,18,18,18,19,19,19,18,18,18,18,
18,18,18,18,18,17,17,17,19,19,19,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,
18,18,18,20,20,20,19,19,19,19,19,19,18,18,18,18,18,18,18,18,18,18,18,18,20,20,
20,17,17,17,10,10,10,18,18,18,21,21,21,20,20,20,20,20,20,20,20,20,19,19,19,21,
21,21,21,21,21,20,20,20,21,21,21,20,20,20,18,18,18,19,19,19,19,19,19,21,21,21,
19,19,19,19,19,19,20,20,20,20,20,20,19,19,18,18,18,18,19,19,19,21,21,21,20,20,
19,21,21,21,19,19,19,21,21,21,20,20,20,21,21,21,19,19,19,10,10,10,2,2,2,10,10,
10,18,18,18,18,18,18,19,19,19,18,18,18,19,19,19,20,20,20,20,20,20,19,19,19,19,
19,19,19,19,19,18,18,18,19,19,19,18,18,18,19,19,19,18,18,18,19,19,19,19,19,19,
18,18,18,18,18,18,18,18,18,19,19,19,20,20,20,19,19,19,19,19,19,19,19,19,19,19,
19,18,18,18,17,17,17,10,10,10,2,2,2};
static Fl_RGB_Image image_imeem(idata_imeem, 32, 32, 3, 0);

Fl_Menu_Item rkCheatUI::menu_ui_ccapiChoice[] = {
 {"2.50", 0,  0, (void*)(25), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"2.00", 0,  0, (void*)(20), 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* rkCheatUI::ui_ccapiVersion25Item = rkCheatUI::menu_ui_ccapiChoice + 0;
Fl_Menu_Item* rkCheatUI::ui_ccapiVersion20Item = rkCheatUI::menu_ui_ccapiChoice + 1;

void rkCheatUI::cb_m_viewerTypeChoice_i(Fl_Choice* o, void* v) {
  ((ValueViewerWindow*)v)->TypeChangedCB(o);
}
void rkCheatUI::cb_m_viewerTypeChoice(Fl_Choice* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_viewerTypeChoice_i(o,v);
}

void rkCheatUI::cb_m_viewerSignedButton_i(Fl_Check_Button* o, void* v) {
  ((ValueViewerWindow*)v)->SignedChangedCB(o);
}
void rkCheatUI::cb_m_viewerSignedButton(Fl_Check_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_viewerSignedButton_i(o,v);
}

void rkCheatUI::cb_m_valueAddCodeButton_i(Fl_Button* o, void* v) {
  ((ValueViewerWindow*)v)->AddCodeCB(o);
}
void rkCheatUI::cb_m_valueAddCodeButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_valueAddCodeButton_i(o,v);
}

void rkCheatUI::cb_m_psNewScanButton_i(Fl_Button* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->NewScanCB(o);
}
void rkCheatUI::cb_m_psNewScanButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psNewScanButton_i(o,v);
}

void rkCheatUI::cb_m_psLoadScan_i(Fl_Button* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->LoadScanCB(o);
}
void rkCheatUI::cb_m_psLoadScan(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psLoadScan_i(o,v);
}

void rkCheatUI::cb_m_psCancelScan_i(Fl_Button* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->hide();
}
void rkCheatUI::cb_m_psCancelScan(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psCancelScan_i(o,v);
}

void rkCheatUI::cb_m_psNewAddress_i(ValueInput* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->AddressChangeCB(o);
}
void rkCheatUI::cb_m_psNewAddress(ValueInput* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psNewAddress_i(o,v);
}

void rkCheatUI::cb_m_psNewStartButton_i(Fl_Button* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->StartNewScanCB(o);
}
void rkCheatUI::cb_m_psNewStartButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psNewStartButton_i(o,v);
}

void rkCheatUI::cb_m_psNewCancelButton_i(Fl_Button* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->hide();
}
void rkCheatUI::cb_m_psNewCancelButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psNewCancelButton_i(o,v);
}

void rkCheatUI::cb_m_psAddPointerButton_i(Fl_Button* o, void*) {
  ((PointerScannerWindow*)o->parent()->parent())->AddPointerToListCB(o);
}
void rkCheatUI::cb_m_psAddPointerButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->parent()->user_data()))->cb_m_psAddPointerButton_i(o,v);
}

void rkCheatUI::cb_m_peValueType_i(ValueTypeChoice* o, void*) {
  ((PointerEditorWindow*)o->parent())->OnTypeChangedCB(o);
}
void rkCheatUI::cb_m_peValueType(ValueTypeChoice* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_peValueType_i(o,v);
}

void rkCheatUI::cb_m_peRefreshButton_i(Fl_Button* o, void*) {
  ((PointerEditorWindow*)o->parent())->OnRefreshCB(o);
}
void rkCheatUI::cb_m_peRefreshButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_peRefreshButton_i(o,v);
}

void rkCheatUI::cb_m_peOKButton_i(Fl_Button* o, void*) {
  ((PointerEditorWindow*)o->parent())->OnOKCB(o);
}
void rkCheatUI::cb_m_peOKButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_peOKButton_i(o,v);
}

void rkCheatUI::cb_m_peCancelButton_i(Fl_Button* o, void*) {
  ((PointerEditorWindow*)o->parent())->OnCancelCB(o);
}
void rkCheatUI::cb_m_peCancelButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_peCancelButton_i(o,v);
}

void rkCheatUI::cb_m_peAddPointerButton_i(Fl_Button* o, void*) {
  ((PointerEditorWindow*)o->parent())->OnAddCB(o);
}
void rkCheatUI::cb_m_peAddPointerButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_peAddPointerButton_i(o,v);
}

void rkCheatUI::cb_m_peDeletePointerButton_i(Fl_Button* o, void*) {
  ((PointerEditorWindow*)o->parent())->OnDeleteCB(o);
}
void rkCheatUI::cb_m_peDeletePointerButton(Fl_Button* o, void* v) {
  ((rkCheatUI*)(o->parent()->user_data()))->cb_m_peDeletePointerButton_i(o,v);
}

void rkCheatUI::RangeButtonCB(Fl_Widget *w, void *data) {
  int type = (int)(unsigned long)data;
  string fname;
  Fl_Native_File_Chooser fnfc;
  switch (type)
  {
  	case RANGE_SAVE:
  		fnfc.title("Save Ranges");
  		fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
  		fnfc.filter("Range Files\t*.rng");
  		fnfc.directory("/var/tmp");
  		switch ( fnfc.show() ) {
  		  case -1: printf("ERROR: %s\n", fnfc.errmsg());    break;  // ERROR
  		  case  1: printf("CANCEL\n");                      break;  // CANCEL
  		  default: 
  		  	fname = fnfc.filename();
  		  	if (fnfc.filter_value() == 0)
  		  	{
  				if (fname.find(".rng", fname.size()-4) == string::npos)
  					fname += ".rng";
  			}
  		  	printf("PICKED: %s\n",fname.c_str()); uiInstance->ui_rangeTable->saveData(fname); break;  // FILE CHOSEN
  		}
  		break;
  	case RANGE_LOAD:
  		fnfc.title("Load Ranges");
  		fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
  		fnfc.filter("Range Files\t*.rng");
  		fnfc.directory("/var/tmp");
  		switch ( fnfc.show() ) {
  		  case -1: printf("ERROR: %s\n", fnfc.errmsg());    break;  // ERROR
  		  case  1: printf("CANCEL\n");                      break;  // CANCEL
  		  default: 
  		  	fname = fnfc.filename();
  		  	printf("PICKED: %s\n",fname.c_str()); uiInstance->ui_rangeTable->loadData(fname); break;  // FILE CHOSEN
  		}	
  		break;
    	case RANGE_CLEAR:
    		uiInstance->clearRanges(true);
  		RangeTableCB(NULL, NULL);
    		break;
     	case RANGE_DELETE:
     		uiInstance->deleteRange();
     		RangeTableCB(NULL, NULL);
     		break;
  		RangeTableCB(NULL, NULL);
  	case RANGE_FIND:
  		InterfaceCCAPI::findAddresses();
  		break;
    	case RANGE_CANCEL:
    		InterfaceCCAPI::cancelFindAddresses();
    		break;		
  }
}

void rkCheatUI::SearchTypeChangeCB(Fl_Widget *w, void *data) {
  if (uiInstance->ui_searchType->isFuzzy())
  {
  	uiInstance->ui_valueInputGroup->deactivate();
  	uiInstance->ui_valueType->activate();
  }
  else if (uiInstance->ui_searchType->isPointer())
  {
  	uiInstance->ui_valueInputGroup->activate();
  	uiInstance->ui_isHex->value(1);
  	uiInstance->ui_valueType->value(uiInstance->getMenuIndex(SEARCH_VALUE_TYPE_4BYTE));
  	int value = get_user_data(int, ((Fl_Menu_Button*)w)->mvalue()->user_data());
  	uiInstance->ui_valueInput->setValueType(value);
  	uiInstance->ui_valueInput->setHex(true);	
  	uiInstance->ui_valueType->deactivate();
  }
  else
  {
  	uiInstance->ui_valueInputGroup->activate();
  	uiInstance->ui_valueType->activate();
  }
  
  if (uiInstance->canStartScan()) //I have a value entered or fuzzy
  {
  	if (uiInstance->m_inProgress)
  	{
  		uiInstance->ui_buttonNextScan->activate();
  		uiInstance->ui_buttonNewScan->activate();
  	}
  	else
  	{
  		uiInstance->ui_buttonNewScan->activate();
  		uiInstance->ui_buttonNextScan->deactivate();		
  	}
  }
  else //i have no value entered and not fuzzy
  {
  	if (uiInstance->m_inProgress)
  	{
  		uiInstance->ui_buttonNextScan->deactivate();
  		uiInstance->ui_buttonNewScan->activate();
  	}
  	else
  	{
  		uiInstance->ui_buttonNewScan->deactivate();
  		uiInstance->ui_buttonNextScan->deactivate();		
  	}
  }
}

void rkCheatUI::SearchValueChangeCB(Fl_Widget *w, void *data) {
  if (uiInstance->canStartScan()) //i have a value
    {
  			  if (uiInstance->m_inProgress)
  			  {
      			uiInstance->ui_buttonNewScan->activate();
  				uiInstance->ui_buttonNextScan->activate();
  			  }
  			  else
  			  {
      			uiInstance->ui_buttonNewScan->activate();
  				uiInstance->ui_buttonNextScan->deactivate();
  			  }
    }
    else
    {
  	  		  if (uiInstance->m_inProgress)
  			  {
      			uiInstance->ui_buttonNewScan->activate();
  				uiInstance->ui_buttonNextScan->deactivate();
  			  }
  			  else
  			  {
      			uiInstance->ui_buttonNewScan->deactivate();
  				uiInstance->ui_buttonNextScan->deactivate();
  			  }
    }
}

void rkCheatUI::SetHexCB(Fl_Widget *w, void *data) {
  int value = (int)((Fl_Button*)w)->value();
  uiInstance->ui_valueInput->setHex(value == 1);
}

void rkCheatUI::SetValueTypeCB(Fl_Widget *w, void *data) {
  int value = get_user_data(int, ((Fl_Menu_Button*)w)->mvalue()->user_data());
  uiInstance->ui_valueInput->setValueType(value);
}

void rkCheatUI::StartSearchButtonCB(Fl_Widget *w, void *data) {
  if (uiInstance->ui_searchType->isPointer())
  {
  	uiInstance->m_pointerScannerWindow->reset();
  	uiInstance->m_pointerScannerWindow->show();
  }
  else
  	InterfaceCCAPI::startNewSearch();
}

void rkCheatUI::ContinueSearchCB(Fl_Widget *w, void *data) {
  InterfaceCCAPI::continueSearch();
}

void rkCheatUI::RangeInputCB(Fl_Widget *w, void *data) {
  string v1 = uiInstance->ui_addRangeInput_Start->value();
    	string v2 = uiInstance->ui_addRangeInput_End->value();
  	if (w == uiInstance->ui_addRangeButton) //we hit the add range button
  	{
    		unsigned int loc1 = stoul(v1, nullptr, 16);
    		unsigned int loc2 = stoul(v2, nullptr, 16);
  		uiInstance->ui_rangeTable->addEntry(loc1, loc2);
  	}
  	else
  	{
    		if (v1.empty() || v2.empty())
    		{
    			if (v1.empty())
    			{
  	  //			uiInstance->ui_addRangeInput_Start->color(fl_rgb_color(150,150,150));
  	  //			uiInstance->ui_addRangeInput_Start->value("00000000");
    			}
    			if (v2.empty())
    			{
  	  //			uiInstance->ui_addRangeInput_End->color(fl_rgb_color(150,150,150));
  	  //			uiInstance->ui_addRangeInput_End->value("00000000");
    			}
    			uiInstance->ui_addRangeButton->deactivate();
    			return;
    		}
    		unsigned int loc1 = stoul(v1, nullptr, 16);
    		unsigned int loc2 = stoul(v2, nullptr, 16);
    		if (loc2 <= loc1)
    		{
    			uiInstance->ui_addRangeButton->deactivate();
    			return;
    		}
    		uiInstance->ui_addRangeButton->activate();
  	}
}

void rkCheatUI::RangeTableCB(Fl_Widget *w, void *data) {
  if (uiInstance->canStartScan())
      		  uiInstance->ui_buttonNewScan->activate();
      	  else
      		  uiInstance->ui_buttonNewScan->deactivate();
}

void rkCheatUI::ResultTableButtonCB(Fl_Widget *w, void *data) {
  int command = (int)(unsigned long)data;
  string fname;
  Fl_Native_File_Chooser fnfc;
  vector<AddressItem> items;
  switch (command)
  {
  case RESULT_TABLE_ADD:
    	items = uiInstance->ui_resultTable->getSelectedResults();
  	if (!items.empty())
  		uiInstance->ui_codeTable->addResults(items, InterfaceCCAPI::instance->getSearchValueType());
    	break;
  case RESULT_TABLE_DELETE:
    	uiInstance->ui_resultTable->deleteResults();
  	if (InterfaceCCAPI::instance)
  	{
  		unsigned long res = InterfaceCCAPI::instance->getNumberOfResults();
  		uiInstance->setNumberOfResultsString(to_string(res));
  	}
    	break;
      case RESULT_TABLE_REFRESH:
    	uiInstance->ui_resultTable->refreshResults();    
  	break;
  }
  #if 0
  	fnfc.title("Save Code Table");
      	fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
      	fnfc.filter("Code Tables\t*.ct");
      	fnfc.directory("/var/tmp");
      	switch ( fnfc.show() ) {
      		case -1: printf("ERROR: %s\n", fnfc.errmsg());    break;  // ERROR
      		case  1: printf("CANCEL\n");                      break;  // CANCEL
      		default: 
      		fname = fnfc.filename();
      		if (fnfc.filter_value() == 0)
      		{
      			if (fname.find(".ct", fname.size()-3) == string::npos)
      				fname += ".ct";
      		}
      		printf("PICKED: %s\n",fname.c_str()); uiInstance->ui_codeTable->saveData(fname); break;  // FILE CHOSEN
      	}
      	break;
      case CODE_TABLE_LOAD:
      	fnfc.title("Load Code Table");
      	fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
      	fnfc.filter("Code Tables\t*.ct");
      	fnfc.directory("/var/tmp");
      	switch ( fnfc.show() ) {
      		case -1: printf("ERROR: %s\n", fnfc.errmsg());    break;  // ERROR
      		case  1: printf("CANCEL\n");                      break;  // CANCEL
      		default: 
      		fname = fnfc.filename();
      		printf("PICKED: %s\n",fname.c_str()); uiInstance->ui_codeTable->loadData(fname); break;  // FILE CHOSEN
      	}	
      	break;
  #endif
}

void rkCheatUI::CodeTableButtonCB(Fl_Widget *w, void *data) {
  int command = (int)(unsigned long)data;
    string fname;
    Fl_Native_File_Chooser fnfc;
    switch (command)
    {
  	case CODE_TABLE_NEW:
  		uiInstance->ui_codeTable->newCode();
  		break;
  	case CODE_TABLE_DELETE:
  		uiInstance->ui_codeTable->deleteCodes();
  		break;
    	case CODE_TABLE_SAVE:
    		fnfc.title("Save Code Table");
    		fnfc.type(Fl_Native_File_Chooser::BROWSE_SAVE_FILE);
    		fnfc.filter("Code Tables\t*.ct");
    		fnfc.directory("/var/tmp");
    		switch ( fnfc.show() ) {
    		  case -1: printf("ERROR: %s\n", fnfc.errmsg());    break;  // ERROR
    		  case  1: printf("CANCEL\n");                      break;  // CANCEL
    		  default: 
    		  	fname = fnfc.filename();
    		  	if (fnfc.filter_value() == 0)
    		  	{
    				if (fname.find(".ct", fname.size()-3) == string::npos)
    					fname += ".ct";
    			}
    		  	printf("PICKED: %s\n",fname.c_str()); uiInstance->ui_codeTable->saveData(fname); break;  // FILE CHOSEN
    		}
    		break;
    	case CODE_TABLE_LOAD:
    		fnfc.title("Load Code Table");
    		fnfc.type(Fl_Native_File_Chooser::BROWSE_FILE);
    		fnfc.filter("Code Tables\t*.ct");
    		fnfc.directory("/var/tmp");
    		switch ( fnfc.show() ) {
    		  case -1: printf("ERROR: %s\n", fnfc.errmsg());    break;  // ERROR
    		  case  1: printf("CANCEL\n");                      break;  // CANCEL
    		  default: 
    		  	fname = fnfc.filename();
    		  	printf("PICKED: %s\n",fname.c_str()); uiInstance->ui_codeTable->loadData(fname); break;  // FILE CHOSEN
    		}	
    		break;
    }
}

void rkCheatUI::ConnectButtonCB(Fl_Widget *w, void *data) {
  if (InterfaceCCAPI::instance)
        {
      	  if ( ((Fl_Button*)w)->value() == 0 ) //disconnect
      	  {
        		InterfaceCCAPI::instance->disconnect();
        		uiInstance->setConnectStatus(INTERFACE_DISCONNECT);
        	  }
      	  else
    	  {
    		string ip = uiInstance->ui_ipInput->getIP();
    		uiInstance->ui_ipInput->deactivate();
      		InterfaceCCAPI::instance->connect(ip);
  			uiInstance->setConnectStatus(INTERFACE_CONNECTING);
    	  }
        }
}

void rkCheatUI::CanConnectCB(Fl_Widget *w, void *data) {
  bool valid = data;
    if (valid && uiInstance)
  	  uiInstance->ui_connectButton->activate();
    else if (!valid && uiInstance)
  	  uiInstance->ui_connectButton->deactivate();
}

void rkCheatUI::ViewerCB(Fl_Widget *w, void *data) {
  uiInstance->m_valueviewer->setCodeData((rkCheat_Code*)data);
  uiInstance->m_valueviewer->show();
}

rkCheatUI::rkCheatUI() {
  uiInstance = this;
  m_interface = 0;
  m_inProgress = false;
  { mainWindow = new rkWindow(1379, 833, "CCCheat");
    mainWindow->box(FL_FLAT_BOX);
    mainWindow->color(FL_BACKGROUND_COLOR);
    mainWindow->selection_color(FL_BACKGROUND_COLOR);
    mainWindow->labeltype(FL_NO_LABEL);
    mainWindow->labelfont(0);
    mainWindow->labelsize(14);
    mainWindow->labelcolor(FL_FOREGROUND_COLOR);
    mainWindow->user_data((void*)(this));
    mainWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    mainWindow->when(FL_WHEN_RELEASE);
    { searchGroup = new Fl_Group(10, 70, 380, 274, "Search");
      searchGroup->box(FL_BORDER_BOX);
      searchGroup->color(FL_DARK1);
      { ui_searchType = new SearchOperationChoice(104, 96, 281, 23, "Search Type:");
        ui_searchType->box(FL_FLAT_BOX);
        ui_searchType->down_box(FL_BORDER_BOX);
        ui_searchType->color(FL_BACKGROUND_COLOR);
        ui_searchType->selection_color(FL_SELECTION_COLOR);
        ui_searchType->labeltype(FL_NORMAL_LABEL);
        ui_searchType->labelfont(0);
        ui_searchType->labelsize(14);
        ui_searchType->labelcolor(FL_FOREGROUND_COLOR);
        ui_searchType->textsize(12);
        ui_searchType->callback((Fl_Callback*)SearchTypeChangeCB);
        ui_searchType->align(Fl_Align(FL_ALIGN_LEFT));
        ui_searchType->when(FL_WHEN_CHANGED);
      } // SearchOperationChoice* ui_searchType
      { ui_valueType = new Fl_Choice(95, 166, 113, 23, "Value Type:");
        ui_valueType->down_box(FL_BORDER_BOX);
        ui_valueType->callback((Fl_Callback*)SetValueTypeCB);
        ui_valueType->menu(menu_ui_valueType);
      } // Fl_Choice* ui_valueType
      { ui_buttonNewScan = new Fl_Button(40, 231, 80, 24, "New Scan");
        ui_buttonNewScan->callback((Fl_Callback*)StartSearchButtonCB);
        ui_buttonNewScan->deactivate();
      } // Fl_Button* ui_buttonNewScan
      { ui_buttonNextScan = new Fl_Button(170, 230, 80, 24, "Next Scan");
        ui_buttonNextScan->callback((Fl_Callback*)ContinueSearchCB);
        ui_buttonNextScan->deactivate();
      } // Fl_Button* ui_buttonNextScan
      { ui_valueInputGroup = new Fl_Group(15, 119, 259, 41);
        ui_valueInputGroup->align(Fl_Align(FL_ALIGN_LEFT));
        { ui_valueInput = new ValueInput(60, 131, 135, 24, "Value:");
          ui_valueInput->box(FL_DOWN_BOX);
          ui_valueInput->color(FL_BACKGROUND2_COLOR);
          ui_valueInput->selection_color(FL_SELECTION_COLOR);
          ui_valueInput->labeltype(FL_NORMAL_LABEL);
          ui_valueInput->labelfont(0);
          ui_valueInput->labelsize(14);
          ui_valueInput->labelcolor(FL_FOREGROUND_COLOR);
          ui_valueInput->callback((Fl_Callback*)SearchValueChangeCB);
          ui_valueInput->align(Fl_Align(FL_ALIGN_LEFT));
          ui_valueInput->when(FL_WHEN_CHANGED);
        } // ValueInput* ui_valueInput
        { ui_isHex = new Fl_Check_Button(210, 140, 64, 15, "Hex");
          ui_isHex->down_box(FL_DOWN_BOX);
          ui_isHex->callback((Fl_Callback*)SetHexCB);
        } // Fl_Check_Button* ui_isHex
        ui_valueInputGroup->end();
      } // Fl_Group* ui_valueInputGroup
      searchGroup->end();
    } // Fl_Group* searchGroup
    { ui_resultGroup = new Fl_Group(805, 70, 560, 274, "Results");
      ui_resultGroup->box(FL_BORDER_BOX);
      ui_resultGroup->color(FL_DARK1);
      { ui_resultTable = new ResultTable(810, 99, 423, 240);
        ui_resultTable->box(FL_THIN_DOWN_FRAME);
        ui_resultTable->color(FL_BACKGROUND_COLOR);
        ui_resultTable->selection_color((Fl_Color)6);
        ui_resultTable->labeltype(FL_NORMAL_LABEL);
        ui_resultTable->labelfont(0);
        ui_resultTable->labelsize(14);
        ui_resultTable->labelcolor(FL_FOREGROUND_COLOR);
        ui_resultTable->align(Fl_Align(FL_ALIGN_TOP));
        ui_resultTable->when(FL_WHEN_RELEASE);
        ui_resultTable->end();
      } // ResultTable* ui_resultTable
      { ui_numOfResults = new Fl_Box(940, 77, 140, 16);
      } // Fl_Box* ui_numOfResults
      { new Fl_Box(810, 77, 130, 16, "Number of Results:");
      } // Fl_Box* o
      { ui_resultBtnGroup = new Fl_Group(1245, 100, 115, 165);
        { ui_ButtonAddResult = new Fl_Button(1250, 100, 100, 30, "Add Result");
          ui_ButtonAddResult->callback((Fl_Callback*)ResultTableButtonCB, (void*)(RESULT_TABLE_ADD));
        } // Fl_Button* ui_ButtonAddResult
        { ui_ButtonDeleteResult = new Fl_Button(1250, 140, 100, 30, "Delete Result");
          ui_ButtonDeleteResult->callback((Fl_Callback*)ResultTableButtonCB, (void*)(RESULT_TABLE_DELETE));
        } // Fl_Button* ui_ButtonDeleteResult
        { ui_ButtonRefreshResult = new Fl_Button(1250, 180, 100, 30, "Refresh");
          ui_ButtonRefreshResult->callback((Fl_Callback*)ResultTableButtonCB, (void*)(RESULT_TABLE_REFRESH));
        } // Fl_Button* ui_ButtonRefreshResult
        ui_resultBtnGroup->end();
      } // Fl_Group* ui_resultBtnGroup
      ui_resultGroup->end();
    } // Fl_Group* ui_resultGroup
    { ui_rangeGroup = new Fl_Group(410, 70, 375, 275, "Range");
      ui_rangeGroup->box(FL_BORDER_BOX);
      ui_rangeGroup->color(FL_DARK1);
      { ui_rangeTable = new RangeTable(418, 75, 242, 215);
        ui_rangeTable->box(FL_THIN_UP_FRAME);
        ui_rangeTable->color(FL_BACKGROUND_COLOR);
        ui_rangeTable->selection_color((Fl_Color)6);
        ui_rangeTable->labeltype(FL_NORMAL_LABEL);
        ui_rangeTable->labelfont(0);
        ui_rangeTable->labelsize(14);
        ui_rangeTable->labelcolor(FL_FOREGROUND_COLOR);
        ui_rangeTable->callback((Fl_Callback*)RangeTableCB);
        ui_rangeTable->align(Fl_Align(FL_ALIGN_TOP));
        ui_rangeTable->when(FL_WHEN_RELEASE);
        ui_rangeTable->end();
      } // RangeTable* ui_rangeTable
      { ui_buttonFindRanges = new Fl_Button(672, 96, 100, 30, "Find Ranges");
        ui_buttonFindRanges->callback((Fl_Callback*)RangeButtonCB, (void*)(RANGE_FIND));
      } // Fl_Button* ui_buttonFindRanges
      { ui_buttonSaveRanges = new Fl_Button(672, 136, 100, 30, "Save Ranges");
        ui_buttonSaveRanges->callback((Fl_Callback*)RangeButtonCB, (void*)(RANGE_SAVE));
      } // Fl_Button* ui_buttonSaveRanges
      { ui_buttonLoadRanges = new Fl_Button(672, 176, 100, 30, "Load Ranges");
        ui_buttonLoadRanges->callback((Fl_Callback*)RangeButtonCB, (void*)(RANGE_LOAD));
      } // Fl_Button* ui_buttonLoadRanges
      { ui_buttonClearRanges = new Fl_Button(672, 216, 100, 30, "Clear Ranges");
        ui_buttonClearRanges->callback((Fl_Callback*)RangeButtonCB, (void*)(RANGE_CLEAR));
      } // Fl_Button* ui_buttonClearRanges
      { ui_addRangeGrp = new Fl_Group(410, 295, 367, 50);
        ui_addRangeGrp->color(FL_DARK1);
        { ui_addRangeInput_Start = new ValueInput(420, 308, 100, 24);
          ui_addRangeInput_Start->box(FL_DOWN_BOX);
          ui_addRangeInput_Start->color(FL_BACKGROUND2_COLOR);
          ui_addRangeInput_Start->selection_color(FL_SELECTION_COLOR);
          ui_addRangeInput_Start->labeltype(FL_NORMAL_LABEL);
          ui_addRangeInput_Start->labelfont(0);
          ui_addRangeInput_Start->labelsize(14);
          ui_addRangeInput_Start->labelcolor(FL_FOREGROUND_COLOR);
          ui_addRangeInput_Start->callback((Fl_Callback*)RangeInputCB);
          ui_addRangeInput_Start->align(Fl_Align(FL_ALIGN_LEFT));
          ui_addRangeInput_Start->when(FL_WHEN_CHANGED);
          ui_addRangeInput_Start->setHex(true);
          ui_addRangeInput_Start->maximum_size(8);
        } // ValueInput* ui_addRangeInput_Start
        { ui_addRangeInput_End = new ValueInput(540, 308, 100, 24);
          ui_addRangeInput_End->box(FL_DOWN_BOX);
          ui_addRangeInput_End->color(FL_BACKGROUND2_COLOR);
          ui_addRangeInput_End->selection_color(FL_SELECTION_COLOR);
          ui_addRangeInput_End->labeltype(FL_NORMAL_LABEL);
          ui_addRangeInput_End->labelfont(0);
          ui_addRangeInput_End->labelsize(14);
          ui_addRangeInput_End->labelcolor(FL_FOREGROUND_COLOR);
          ui_addRangeInput_End->callback((Fl_Callback*)RangeInputCB);
          ui_addRangeInput_End->align(Fl_Align(FL_ALIGN_LEFT));
          ui_addRangeInput_End->when(FL_WHEN_CHANGED);
          ui_addRangeInput_End->setHex(true);
          ui_addRangeInput_End->maximum_size(8);
        } // ValueInput* ui_addRangeInput_End
        { ui_addRangeButton = new Fl_Button(672, 305, 100, 30, "Add Range");
          ui_addRangeButton->callback((Fl_Callback*)RangeInputCB);
          ui_addRangeButton->deactivate();
        } // Fl_Button* ui_addRangeButton
        ui_addRangeGrp->end();
      } // Fl_Group* ui_addRangeGrp
      { ui_buttonDeleteRange = new Fl_Button(672, 255, 100, 30, "Delete Range");
        ui_buttonDeleteRange->callback((Fl_Callback*)RangeButtonCB, (void*)(RANGE_DELETE));
      } // Fl_Button* ui_buttonDeleteRange
      ui_rangeGroup->end();
    } // Fl_Group* ui_rangeGroup
    { ui_statusbar = new Fl_Group(1, 775, 1364, 35);
      ui_statusbar->box(FL_BORDER_BOX);
      { ui_opProgress = new Fl_Progress(10, 782, 1220, 20);
        ui_opProgress->minimum(0.0f);
        ui_opProgress->maximum(1.0f);
      } // Fl_Progress* ui_opProgress
      { ui_opStatus = new Fl_Box(1225, 784, 135, 16, "Ready");
      } // Fl_Box* ui_opStatus
      ui_statusbar->size(mainWindow->w()-12, 35);
      ui_statusbar->position(0, mainWindow->h() - ui_statusbar->h() - 12);
      ui_statusbar->end();
    } // Fl_Group* ui_statusbar
    { ui_codeGroup = new Fl_Group(114, 395, 1120, 360, "Codes");
      ui_codeGroup->box(FL_BORDER_BOX);
      ui_codeGroup->color(FL_DARK1);
      { ui_codeTable = new CodeTable(119, 425, 985, 325);
        ui_codeTable->box(FL_THIN_DOWN_FRAME);
        ui_codeTable->color(FL_DARK1);
        ui_codeTable->selection_color((Fl_Color)6);
        ui_codeTable->labeltype(FL_NO_LABEL);
        ui_codeTable->labelfont(0);
        ui_codeTable->labelsize(14);
        ui_codeTable->labelcolor(FL_FOREGROUND_COLOR);
        ui_codeTable->align(Fl_Align(FL_ALIGN_TOP));
        ui_codeTable->when(FL_WHEN_RELEASE);
        ui_codeTable->setViewer(ViewerCB);
        ui_codeTable->end();
      } // CodeTable* ui_codeTable
      { ui_ButtonNewCode = new Fl_Button(1124, 465, 100, 30, "New Code");
        ui_ButtonNewCode->callback((Fl_Callback*)CodeTableButtonCB, (void*)(CODE_TABLE_NEW));
      } // Fl_Button* ui_ButtonNewCode
      { ui_ButtonDeleteCode = new Fl_Button(1124, 511, 100, 30, "Delete Code");
        ui_ButtonDeleteCode->callback((Fl_Callback*)CodeTableButtonCB, (void*)(CODE_TABLE_DELETE));
      } // Fl_Button* ui_ButtonDeleteCode
      { ui_ButtonSaveCodes = new Fl_Button(1124, 558, 100, 30, "Save Codes");
        ui_ButtonSaveCodes->callback((Fl_Callback*)CodeTableButtonCB, (void*)(CODE_TABLE_SAVE));
      } // Fl_Button* ui_ButtonSaveCodes
      { ui_ButtonLoadCodes = new Fl_Button(1124, 605, 100, 30, "Load Codes");
        ui_ButtonLoadCodes->callback((Fl_Callback*)CodeTableButtonCB, (void*)(CODE_TABLE_LOAD));
      } // Fl_Button* ui_ButtonLoadCodes
      ui_codeGroup->end();
    } // Fl_Group* ui_codeGroup
    { ui_connectButton = new Fl_Light_Button(20, 20, 100, 30, "Connect");
      ui_connectButton->type(1);
      ui_connectButton->selection_color(FL_YELLOW);
      ui_connectButton->callback((Fl_Callback*)ConnectButtonCB);
      ui_connectButton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      ui_connectButton->deactivate();
    } // Fl_Light_Button* ui_connectButton
    { ui_ipInput = new IPInput(135, 20, 255, 30);
      ui_ipInput->box(FL_NO_BOX);
      ui_ipInput->color(FL_BACKGROUND_COLOR);
      ui_ipInput->selection_color(FL_BACKGROUND_COLOR);
      ui_ipInput->labeltype(FL_NORMAL_LABEL);
      ui_ipInput->labelfont(0);
      ui_ipInput->labelsize(14);
      ui_ipInput->labelcolor(FL_FOREGROUND_COLOR);
      ui_ipInput->callback((Fl_Callback*)CanConnectCB);
      ui_ipInput->align(Fl_Align(FL_ALIGN_TOP));
      ui_ipInput->when(FL_WHEN_CHANGED);
      readIP();
      ui_ipInput->end();
    } // IPInput* ui_ipInput
    { ui_versionText = new Fl_Box(1239, 25, 106, 16, "Version");
      ui_versionText->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* ui_versionText
    { ui_infoButton = new Fl_Button(1204, 18, 32, 32);
      ui_infoButton->image(image_imeem);
      ui_infoButton->callback((Fl_Callback*)cb_ui_infoButton);
      ui_infoButton->align(Fl_Align(512));
    } // Fl_Button* ui_infoButton
    { ui_ccapiChoice = new Fl_Choice(504, 24, 66, 21, "CCAPI Version:");
      ui_ccapiChoice->down_box(FL_BORDER_BOX);
      ui_ccapiChoice->menu(menu_ui_ccapiChoice);
    } // Fl_Choice* ui_ccapiChoice
    mainWindow->end();
  } // rkWindow* mainWindow
  { m_valueviewer = new ValueViewerWindow(526, 695, "Value Viewer");
    m_valueviewer->box(FL_FLAT_BOX);
    m_valueviewer->color(FL_BACKGROUND_COLOR);
    m_valueviewer->selection_color(FL_BACKGROUND_COLOR);
    m_valueviewer->labeltype(FL_NO_LABEL);
    m_valueviewer->labelfont(0);
    m_valueviewer->labelsize(14);
    m_valueviewer->labelcolor(FL_FOREGROUND_COLOR);
    m_valueviewer->user_data((void*)(this));
    m_valueviewer->align(Fl_Align(FL_ALIGN_TOP));
    m_valueviewer->when(FL_WHEN_RELEASE);
    { m_valueTable = new ValueViewerTable(0, 60, 495, 625);
      m_valueTable->box(FL_THIN_DOWN_FRAME);
      m_valueTable->color(FL_BACKGROUND_COLOR);
      m_valueTable->selection_color((Fl_Color)6);
      m_valueTable->labeltype(FL_NORMAL_LABEL);
      m_valueTable->labelfont(0);
      m_valueTable->labelsize(14);
      m_valueTable->labelcolor(FL_FOREGROUND_COLOR);
      m_valueTable->align(Fl_Align(FL_ALIGN_TOP));
      m_valueTable->when(FL_WHEN_RELEASE);
      m_valueTable->end();
    } // ValueViewerTable* m_valueTable
    { m_viewerTypeChoice = new Fl_Choice(45, 15, 110, 25, "Type");
      m_viewerTypeChoice->down_box(FL_BORDER_BOX);
      m_viewerTypeChoice->callback((Fl_Callback*)cb_m_viewerTypeChoice);
      m_viewerTypeChoice->when(FL_WHEN_CHANGED);
      m_viewerTypeChoice->menu(menu_ui_valueType);
    } // Fl_Choice* m_viewerTypeChoice
    { m_viewerSignedButton = new Fl_Check_Button(175, 15, 64, 20, "Signed");
      m_viewerSignedButton->down_box(FL_DOWN_BOX);
      m_viewerSignedButton->callback((Fl_Callback*)cb_m_viewerSignedButton);
    } // Fl_Check_Button* m_viewerSignedButton
    { m_valueAddCodeButton = new Fl_Button(395, 15, 100, 30, "Add Code");
      m_valueAddCodeButton->callback((Fl_Callback*)cb_m_valueAddCodeButton);
    } // Fl_Button* m_valueAddCodeButton
    m_valueviewer->end();
  } // ValueViewerWindow* m_valueviewer
  { m_infoWindow = new InfoWindow(476, 336, "CCCheat Information");
    m_infoWindow->box(FL_FLAT_BOX);
    m_infoWindow->color(FL_BACKGROUND_COLOR);
    m_infoWindow->selection_color(FL_BACKGROUND_COLOR);
    m_infoWindow->labeltype(FL_NO_LABEL);
    m_infoWindow->labelfont(0);
    m_infoWindow->labelsize(14);
    m_infoWindow->labelcolor(FL_FOREGROUND_COLOR);
    m_infoWindow->user_data((void*)(this));
    m_infoWindow->align(Fl_Align(FL_ALIGN_TOP));
    m_infoWindow->when(FL_WHEN_RELEASE);
    m_infoWindow->end();
  } // InfoWindow* m_infoWindow
  { m_pointerScannerWindow = new PointerScannerWindow(557, 534, "Pointer Scanner");
    m_pointerScannerWindow->box(FL_FLAT_BOX);
    m_pointerScannerWindow->color(FL_BACKGROUND_COLOR);
    m_pointerScannerWindow->selection_color(FL_BACKGROUND_COLOR);
    m_pointerScannerWindow->labeltype(FL_NO_LABEL);
    m_pointerScannerWindow->labelfont(0);
    m_pointerScannerWindow->labelsize(14);
    m_pointerScannerWindow->labelcolor(FL_FOREGROUND_COLOR);
    m_pointerScannerWindow->user_data((void*)(this));
    m_pointerScannerWindow->align(Fl_Align(FL_ALIGN_TOP));
    m_pointerScannerWindow->when(FL_WHEN_RELEASE);
    { m_psLoadNewGroup = new Fl_Group(23, 60, 520, 365);
      m_psLoadNewGroup->hide();
      { m_psNewScanButton = new Fl_Button(238, 215, 90, 30, "New Scan");
        m_psNewScanButton->callback((Fl_Callback*)cb_m_psNewScanButton);
      } // Fl_Button* m_psNewScanButton
      { m_psLoadScan = new Fl_Button(238, 270, 90, 30, "Load Scan");
        m_psLoadScan->callback((Fl_Callback*)cb_m_psLoadScan);
      } // Fl_Button* m_psLoadScan
      { m_psCancelScan = new Fl_Button(238, 325, 90, 30, "Exit");
        m_psCancelScan->callback((Fl_Callback*)cb_m_psCancelScan);
      } // Fl_Button* m_psCancelScan
      { new Fl_Box(70, 157, 425, 38, "Would you like to start a new scan or load a previous pointer scan?");
      } // Fl_Box* o
      m_psLoadNewGroup->end();
    } // Fl_Group* m_psLoadNewGroup
    { m_psNewGroup = new Fl_Group(10, 10, 550, 515);
      { m_psNewAddress = new ValueInput(175, 26, 160, 24, "Address To Scan:");
        m_psNewAddress->box(FL_DOWN_BOX);
        m_psNewAddress->color(FL_BACKGROUND2_COLOR);
        m_psNewAddress->selection_color(FL_SELECTION_COLOR);
        m_psNewAddress->labeltype(FL_NORMAL_LABEL);
        m_psNewAddress->labelfont(0);
        m_psNewAddress->labelsize(14);
        m_psNewAddress->labelcolor(FL_FOREGROUND_COLOR);
        m_psNewAddress->callback((Fl_Callback*)cb_m_psNewAddress);
        m_psNewAddress->align(Fl_Align(FL_ALIGN_LEFT));
        m_psNewAddress->when(FL_WHEN_CHANGED);
      } // ValueInput* m_psNewAddress
      { m_psOffset = new ValueInput(175, 63, 110, 24, "Offset From Address:");
        m_psOffset->box(FL_DOWN_BOX);
        m_psOffset->color(FL_BACKGROUND2_COLOR);
        m_psOffset->selection_color(FL_SELECTION_COLOR);
        m_psOffset->labeltype(FL_NORMAL_LABEL);
        m_psOffset->labelfont(0);
        m_psOffset->labelsize(14);
        m_psOffset->labelcolor(FL_FOREGROUND_COLOR);
        m_psOffset->align(Fl_Align(FL_ALIGN_LEFT));
        m_psOffset->when(FL_WHEN_RELEASE);
      } // ValueInput* m_psOffset
      { m_psNewDepthSpinner = new Fl_Spinner(175, 101, 50, 24, "Max Scan Depth:");
      } // Fl_Spinner* m_psNewDepthSpinner
      { m_psNewStartButton = new Fl_Button(395, 25, 85, 25, "Start");
        m_psNewStartButton->callback((Fl_Callback*)cb_m_psNewStartButton);
      } // Fl_Button* m_psNewStartButton
      { m_psNewScanTable = new PointerScannerTable(32, 130, 373, 385);
        m_psNewScanTable->box(FL_THIN_DOWN_FRAME);
        m_psNewScanTable->color(FL_BACKGROUND_COLOR);
        m_psNewScanTable->selection_color(FL_BACKGROUND_COLOR);
        m_psNewScanTable->labeltype(FL_NORMAL_LABEL);
        m_psNewScanTable->labelfont(0);
        m_psNewScanTable->labelsize(14);
        m_psNewScanTable->labelcolor(FL_FOREGROUND_COLOR);
        m_psNewScanTable->align(Fl_Align(FL_ALIGN_TOP));
        m_psNewScanTable->when(FL_WHEN_RELEASE);
        m_psNewScanTable->end();
      } // PointerScannerTable* m_psNewScanTable
      { m_psNewDumpProgress = new Fl_Progress(255, 100, 275, 20, "Dumping Memory...");
        m_psNewDumpProgress->hide();
      } // Fl_Progress* m_psNewDumpProgress
      { m_psScanStateLabelGroup = new Fl_Group(275, 100, 285, 28);
        { m_psScanningLabel = new Fl_Box(282, 102, 93, 21, "Scanning...");
          m_psScanningLabel->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* m_psScanningLabel
        { m_psScanningNumberLabel = new Fl_Box(457, 102, 73, 21, "number");
          m_psScanningNumberLabel->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* m_psScanningNumberLabel
        { m_psScanningResultsLabel = new Fl_Box(402, 102, 58, 21, "Results:");
          m_psScanningResultsLabel->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* m_psScanningResultsLabel
        m_psScanStateLabelGroup->end();
      } // Fl_Group* m_psScanStateLabelGroup
      { m_psNewCancelButton = new Fl_Button(395, 60, 85, 25, "Exit");
        m_psNewCancelButton->callback((Fl_Callback*)cb_m_psNewCancelButton);
      } // Fl_Button* m_psNewCancelButton
      { m_psAddPointerButton = new Fl_Button(455, 130, 85, 25, "Add Pointer");
        m_psAddPointerButton->callback((Fl_Callback*)cb_m_psAddPointerButton);
      } // Fl_Button* m_psAddPointerButton
      m_psNewGroup->end();
    } // Fl_Group* m_psNewGroup
    m_pointerScannerWindow->reset();
    m_pointerScannerWindow->set_modal();
    m_pointerScannerWindow->end();
  } // PointerScannerWindow* m_pointerScannerWindow
  { m_peWindow = new PointerEditorWindow(426, 476, "Pointer Editor");
    m_peWindow->box(FL_FLAT_BOX);
    m_peWindow->color(FL_BACKGROUND_COLOR);
    m_peWindow->selection_color(FL_BACKGROUND_COLOR);
    m_peWindow->labeltype(FL_NO_LABEL);
    m_peWindow->labelfont(0);
    m_peWindow->labelsize(14);
    m_peWindow->labelcolor(FL_FOREGROUND_COLOR);
    m_peWindow->user_data((void*)(this));
    m_peWindow->align(Fl_Align(FL_ALIGN_TOP));
    m_peWindow->when(FL_WHEN_RELEASE);
    { m_peAddressSet0 = new AddressOffsetGroup(15, 14, 395, 37);
      m_peAddressSet0->box(FL_BORDER_BOX);
      m_peAddressSet0->color(FL_BACKGROUND_COLOR);
      m_peAddressSet0->selection_color(FL_BACKGROUND_COLOR);
      m_peAddressSet0->labeltype(FL_NORMAL_LABEL);
      m_peAddressSet0->labelfont(0);
      m_peAddressSet0->labelsize(14);
      m_peAddressSet0->labelcolor(FL_FOREGROUND_COLOR);
      m_peAddressSet0->align(Fl_Align(FL_ALIGN_TOP));
      m_peAddressSet0->when(FL_WHEN_RELEASE);
      m_peAddressSet0->end();
    } // AddressOffsetGroup* m_peAddressSet0
    { m_peAddressSet1 = new AddressOffsetGroup(15, 62, 395, 37);
      m_peAddressSet1->box(FL_BORDER_BOX);
      m_peAddressSet1->color(FL_BACKGROUND_COLOR);
      m_peAddressSet1->selection_color(FL_BACKGROUND_COLOR);
      m_peAddressSet1->labeltype(FL_NORMAL_LABEL);
      m_peAddressSet1->labelfont(0);
      m_peAddressSet1->labelsize(14);
      m_peAddressSet1->labelcolor(FL_FOREGROUND_COLOR);
      m_peAddressSet1->align(Fl_Align(FL_ALIGN_TOP));
      m_peAddressSet1->when(FL_WHEN_RELEASE);
      m_peAddressSet1->end();
    } // AddressOffsetGroup* m_peAddressSet1
    { m_peAddressSet2 = new AddressOffsetGroup(15, 111, 395, 37);
      m_peAddressSet2->box(FL_BORDER_BOX);
      m_peAddressSet2->color(FL_BACKGROUND_COLOR);
      m_peAddressSet2->selection_color(FL_BACKGROUND_COLOR);
      m_peAddressSet2->labeltype(FL_NORMAL_LABEL);
      m_peAddressSet2->labelfont(0);
      m_peAddressSet2->labelsize(14);
      m_peAddressSet2->labelcolor(FL_FOREGROUND_COLOR);
      m_peAddressSet2->align(Fl_Align(FL_ALIGN_TOP));
      m_peAddressSet2->when(FL_WHEN_RELEASE);
      m_peAddressSet2->end();
    } // AddressOffsetGroup* m_peAddressSet2
    { m_peAddressSet3 = new AddressOffsetGroup(15, 159, 395, 37);
      m_peAddressSet3->box(FL_BORDER_BOX);
      m_peAddressSet3->color(FL_BACKGROUND_COLOR);
      m_peAddressSet3->selection_color(FL_BACKGROUND_COLOR);
      m_peAddressSet3->labeltype(FL_NORMAL_LABEL);
      m_peAddressSet3->labelfont(0);
      m_peAddressSet3->labelsize(14);
      m_peAddressSet3->labelcolor(FL_FOREGROUND_COLOR);
      m_peAddressSet3->align(Fl_Align(FL_ALIGN_TOP));
      m_peAddressSet3->when(FL_WHEN_RELEASE);
      m_peAddressSet3->end();
    } // AddressOffsetGroup* m_peAddressSet3
    { m_peAddressSet4 = new AddressOffsetGroup(15, 208, 395, 37);
      m_peAddressSet4->box(FL_BORDER_BOX);
      m_peAddressSet4->color(FL_BACKGROUND_COLOR);
      m_peAddressSet4->selection_color(FL_BACKGROUND_COLOR);
      m_peAddressSet4->labeltype(FL_NORMAL_LABEL);
      m_peAddressSet4->labelfont(0);
      m_peAddressSet4->labelsize(14);
      m_peAddressSet4->labelcolor(FL_FOREGROUND_COLOR);
      m_peAddressSet4->align(Fl_Align(FL_ALIGN_TOP));
      m_peAddressSet4->when(FL_WHEN_RELEASE);
      m_peAddressSet4->end();
    } // AddressOffsetGroup* m_peAddressSet4
    { m_peResolvedAddress = new ValueInput(140, 306, 130, 24);
      m_peResolvedAddress->box(FL_DOWN_BOX);
      m_peResolvedAddress->color(FL_BACKGROUND2_COLOR);
      m_peResolvedAddress->selection_color(FL_SELECTION_COLOR);
      m_peResolvedAddress->labeltype(FL_NORMAL_LABEL);
      m_peResolvedAddress->labelfont(0);
      m_peResolvedAddress->labelsize(14);
      m_peResolvedAddress->labelcolor(FL_FOREGROUND_COLOR);
      m_peResolvedAddress->align(Fl_Align(FL_ALIGN_LEFT));
      m_peResolvedAddress->when(FL_WHEN_RELEASE);
      m_peResolvedAddress->deactivate();
    } // ValueInput* m_peResolvedAddress
    { Fl_Box* o = new Fl_Box(15, 311, 130, 16, "Resolved Address:");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { m_peValueType = new ValueTypeChoice(315, 340, 95, 20, "Type:");
      m_peValueType->box(FL_FLAT_BOX);
      m_peValueType->down_box(FL_BORDER_BOX);
      m_peValueType->color(FL_BACKGROUND_COLOR);
      m_peValueType->selection_color(FL_SELECTION_COLOR);
      m_peValueType->labeltype(FL_NORMAL_LABEL);
      m_peValueType->labelfont(0);
      m_peValueType->labelsize(14);
      m_peValueType->labelcolor(FL_FOREGROUND_COLOR);
      m_peValueType->callback((Fl_Callback*)cb_m_peValueType);
      m_peValueType->align(Fl_Align(FL_ALIGN_LEFT));
      m_peValueType->when(FL_WHEN_CHANGED);
    } // ValueTypeChoice* m_peValueType
    { m_peRefreshButton = new Fl_Button(173, 390, 80, 25, "Refresh");
      m_peRefreshButton->callback((Fl_Callback*)cb_m_peRefreshButton);
    } // Fl_Button* m_peRefreshButton
    { m_peOKButton = new Fl_Button(113, 425, 80, 25, "OK");
      m_peOKButton->callback((Fl_Callback*)cb_m_peOKButton);
    } // Fl_Button* m_peOKButton
    { m_peCancelButton = new Fl_Button(233, 425, 80, 25, "Cancel");
      m_peCancelButton->callback((Fl_Callback*)cb_m_peCancelButton);
    } // Fl_Button* m_peCancelButton
    { m_peAddPointerButton = new Fl_Button(113, 260, 80, 25, "Add");
      m_peAddPointerButton->callback((Fl_Callback*)cb_m_peAddPointerButton);
    } // Fl_Button* m_peAddPointerButton
    { m_peDeletePointerButton = new Fl_Button(233, 260, 80, 25, "Delete");
      m_peDeletePointerButton->callback((Fl_Callback*)cb_m_peDeletePointerButton);
    } // Fl_Button* m_peDeletePointerButton
    { m_peResolvedValue = new ValueInput(140, 336, 130, 24);
      m_peResolvedValue->box(FL_DOWN_BOX);
      m_peResolvedValue->color(FL_BACKGROUND2_COLOR);
      m_peResolvedValue->selection_color(FL_SELECTION_COLOR);
      m_peResolvedValue->labeltype(FL_NORMAL_LABEL);
      m_peResolvedValue->labelfont(0);
      m_peResolvedValue->labelsize(14);
      m_peResolvedValue->labelcolor(FL_FOREGROUND_COLOR);
      m_peResolvedValue->align(Fl_Align(FL_ALIGN_LEFT));
      m_peResolvedValue->when(FL_WHEN_RELEASE);
      m_peResolvedValue->deactivate();
    } // ValueInput* m_peResolvedValue
    { Fl_Box* o = new Fl_Box(15, 341, 125, 16, "Resolved Value:");
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    m_peWindow->reset();
    m_peWindow->set_modal();
    m_peWindow->end();
  } // PointerEditorWindow* m_peWindow
}

void rkCheatUI::setInterface(InterfaceCCAPI *iface) {
  m_interface = iface;
}

void rkCheatUI::clearRanges(bool reInit) {
  ui_rangeTable->clear();
  if (reInit)
  	ui_rangeTable->addEntry(0, 0xFFFFFFFF);
  	ui_rangeTable->clearSelection();
}

void rkCheatUI::deleteRange() {
  for (int i=ui_rangeTable->rows()-1; i>=0; i--)
  	{
  		if (ui_rangeTable->row_selected(i))
  		{
  			ui_rangeTable->deleteEntry(i);
  		}
  	}
  	ui_rangeTable->clearSelection();
}

void rkCheatUI::addRange(unsigned long begin, unsigned long end) {
  ui_rangeTable->addEntry(begin, end);
}

void rkCheatUI::setRangeProgress(float percent, string status, bool done) {
  static char stat[50];
  static char pc[20];
  ui_opProgress->value(percent);
  sprintf(pc, "%.1f%%", percent*100);
  ui_opProgress->label(pc);
  strncpy(stat, status.c_str(), 50);
  ui_opStatus->label(stat);
}

void rkCheatUI::findRangeStarted() {
  searchGroup->deactivate();
  ui_buttonSaveRanges->deactivate();
  ui_buttonLoadRanges->deactivate();
  ui_buttonClearRanges->deactivate();
  ui_buttonDeleteRange->deactivate();
  ui_addRangeGrp->deactivate();
  ui_buttonFindRanges->label("Cancel");
  ui_buttonFindRanges->user_data((void*)(RANGE_CANCEL));
}

void rkCheatUI::findRangeStopped() {
  searchGroup->activate();
  ui_buttonSaveRanges->activate();
  ui_buttonLoadRanges->activate();
  ui_buttonClearRanges->activate();
  ui_buttonDeleteRange->activate();
  ui_addRangeGrp->activate();
  ui_buttonFindRanges->label("Find Ranges");
  ui_buttonFindRanges->user_data((void*)(RANGE_FIND));
}

bool rkCheatUI::canStartScan() {
  if (ui_rangeTable->hasSelection())
  	{
  		if (ui_searchType->isFuzzy())//I don't care about the value
  			return true;
  		if (!string(ui_valueInput->value()).empty())
  			return true;
  	}
  	return false;
}

void rkCheatUI::searchStarted() {
  ui_rangeGroup->deactivate();
  ui_searchType->deactivate();
  ui_valueInputGroup->deactivate();
  ui_valueType->deactivate();
  ui_buttonNextScan->deactivate();
  ui_buttonNewScan->label("Cancel");
  ui_buttonNewScan->activate();
  ui_resultTable->setResultType(get_user_data(char, ui_valueType->mvalue()->user_data()));
}

void rkCheatUI::searchStopped(char how) {
  if (how == SEARCH_STOPPED_PROPER)
  {
  	ui_rangeGroup->deactivate();
  	ui_valueType->deactivate();
  	ui_buttonNextScan->activate();
  	ui_buttonNewScan->label("Reset Scan");
  	m_inProgress = true;
  }
  else
  {
  	ui_numOfResults->label("");
  	ui_rangeGroup->activate();
  	ui_valueType->activate();
  	ui_buttonNextScan->deactivate();
  	if (how == SEARCH_STOPPED_NO_RESULTS)
  		ui_buttonNewScan->label("Reset Scan");
  	else
  		ui_buttonNewScan->label("New Scan");
  	m_inProgress = false;		
  }
  ui_searchType->activate();
  ui_valueInputGroup->activate();
  ui_buttonNewScan->activate();
  SearchTypeChangeCB(0,0);
}

int rkCheatUI::getMenuIndex(char val) {
  for (int i=0; menu_ui_valueType[i].text != 0; ++i)
  {
  	if (get_user_data(int, menu_ui_valueType[i].user_data_) == val)
  		return i;
  }
  return -1;
}

void rkCheatUI::setSearchProgress(float percent, string status, bool done) {
  static char stat[50];
  static char pc[20];
  ui_opProgress->value(percent);
  sprintf(pc, "%.1f%%", percent*100);
  ui_opProgress->label(pc);
  strncpy(stat, status.c_str(), 50);
  ui_opStatus->label(stat);
}

void rkCheatUI::setNumberOfResultsString(string res) {
  static char stat[50];
  strncpy(stat, res.c_str(), 50);
  ui_numOfResults->label(stat);
}

void rkCheatUI::setConnectStatus(char status) {
  static char stat[50];
  if (status == INTERFACE_CONNECT_FAIL)
  {
  sprintf(stat, "Cannot Connect!");
  ui_opStatus->labelcolor(FL_RED);
  ui_opStatus->label(stat);
  searchGroup->deactivate();
  ui_rangeGroup->deactivate();
  ui_resultGroup->deactivate();
  ui_codeGroup->deactivate();
  ui_connectButton->clear();
  ui_ipInput->activate();
  ui_ccapiChoice->activate();
  }
  else if (status == INTERFACE_CONNECT_SUCCESS)
  {
  sprintf(stat, "Ready");
  ui_opStatus->labelcolor(FL_BLACK);
  ui_opStatus->label(stat);
  searchGroup->activate();
  ui_rangeGroup->activate();
  ui_resultGroup->activate();
  ui_codeGroup->activate();
  ui_ipInput->deactivate();
  ui_ccapiChoice->deactivate();
  ui_connectButton->selection_color(FL_GREEN);
  ui_connectButton->damage(FL_DAMAGE_ALL);
  storeIP();
  }
  else if (status == INTERFACE_DISCONNECT)
  {
  sprintf(stat, "Disconnected");
  ui_opStatus->labelcolor(FL_BLACK);
  ui_opStatus->label(stat);
  searchGroup->deactivate();
  ui_rangeGroup->deactivate();
  ui_resultGroup->deactivate();
  ui_codeGroup->deactivate();
  ui_connectButton->clear();
  ui_ipInput->activate();
  ui_ccapiChoice->activate();
  ui_ipInput->checkValid();
  if (m_valueviewer->visible())
  	m_valueviewer->hide();
  
  }
  else if (status == INTERFACE_CONNECTING)
  {
  sprintf(stat, "Connecting");
  ui_opStatus->labelcolor(FL_BLACK);
  ui_opStatus->label(stat);
  searchGroup->deactivate();
  ui_rangeGroup->deactivate();
  ui_resultGroup->deactivate();
  ui_codeGroup->deactivate();
  ui_ipInput->deactivate();
  ui_ccapiChoice->deactivate();
  ui_connectButton->selection_color(FL_YELLOW);
  ui_connectButton->damage(FL_DAMAGE_ALL);
  }
}

void rkCheatUI::storeIP() {
  char buf[255];
  if (GetCurrentDir(buf, 255) != 0) //we can store the IP
  {
  	string dir = buf;
  	ofstream ipFile;
  	ipFile.open (dir+"/"+"ip.cfg");
  	ipFile << ui_ipInput->getIP();
  	ipFile.close();
  }
}

void rkCheatUI::readIP() {
  char buf[255];
  	if (GetCurrentDir(buf, 255) != 0) //we can store the IP
  	{
  		string dir = buf;
  		ifstream ipFile;
  		ipFile.open (dir+"/"+"ip.cfg");
  		if (ipFile)
  		{
  			string ip;
  			ipFile >> ip;
  			ui_ipInput->setIP(ip);
  			ipFile.close();
  		}
  	}
}

void rkCheatUI::setVersion(string ver) {
  static char ui_version[70];
  sprintf(ui_version, "Version: %s", ver.c_str());
  ui_versionText->label(ui_version);
}
